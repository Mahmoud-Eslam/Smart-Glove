
Glove.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a6c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00002a6c  00002ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000023ac  00000000  00000000  00002b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f9a  00000000  00000000  00004ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00006171  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  000081b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  000092b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a23c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a3bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a67e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000af0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3b       	cpi	r26, 0xBA	; 186
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 05 12 	call	0x240a	; 0x240a <main>
      7a:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a2 e7       	ldi	r26, 0x72	; 114
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	82 e7       	ldi	r24, 0x72	; 114
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	62 e7       	ldi	r22, 0x72	; 114
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <ADC_Init>:
 *  Author: user
 */ 

#include "ADC.h"

void ADC_Init(void){
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1<<REFS0);//INTERNAL V_REF
     c96:	e7 e2       	ldi	r30, 0x27	; 39
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 e4       	ldi	r24, 0x40	; 64
     c9c:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);//ENABLE ADC & F_CPU/128
     c9e:	e6 e2       	ldi	r30, 0x26	; 38
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	87 e8       	ldi	r24, 0x87	; 135
     ca4:	80 83       	st	Z, r24
}
     ca6:	cf 91       	pop	r28
     ca8:	df 91       	pop	r29
     caa:	08 95       	ret

00000cac <ADC_Read>:
int ADC_Read(Uint8 modeID){
     cac:	df 93       	push	r29
     cae:	cf 93       	push	r28
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <ADC_Read+0x6>
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <ADC_Read+0x8>
     cb4:	0f 92       	push	r0
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	8d 83       	std	Y+5, r24	; 0x05
	long temp = 0;
     cbc:	19 82       	std	Y+1, r1	; 0x01
     cbe:	1a 82       	std	Y+2, r1	; 0x02
     cc0:	1b 82       	std	Y+3, r1	; 0x03
     cc2:	1c 82       	std	Y+4, r1	; 0x04
	ADMUX = (ADMUX & 0xE0)|(modeID & 0x1F);//SET THE ADC MODE
     cc4:	a7 e2       	ldi	r26, 0x27	; 39
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e7 e2       	ldi	r30, 0x27	; 39
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	98 2f       	mov	r25, r24
     cd0:	90 7e       	andi	r25, 0xE0	; 224
     cd2:	8d 81       	ldd	r24, Y+5	; 0x05
     cd4:	8f 71       	andi	r24, 0x1F	; 31
     cd6:	89 2b       	or	r24, r25
     cd8:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADSC);//START CONVERSION
     cda:	a6 e2       	ldi	r26, 0x26	; 38
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e6 e2       	ldi	r30, 0x26	; 38
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	80 64       	ori	r24, 0x40	; 64
     ce6:	8c 93       	st	X, r24
	while (!(ADCSRA & (1<<ADIF)));//WAITING THE FLAG TO BE SET 
     ce8:	e6 e2       	ldi	r30, 0x26	; 38
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	88 2f       	mov	r24, r24
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	80 71       	andi	r24, 0x10	; 16
     cf4:	90 70       	andi	r25, 0x00	; 0
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	b9 f3       	breq	.-18     	; 0xce8 <ADC_Read+0x3c>
	ADCSRA |= (1<<ADIF);//CLEAR THE FLAG
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 61       	ori	r24, 0x10	; 16
     d06:	8c 93       	st	X, r24
	temp = ADCL;
     d08:	e4 e2       	ldi	r30, 0x24	; 36
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	88 2f       	mov	r24, r24
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	a0 e0       	ldi	r26, 0x00	; 0
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	89 83       	std	Y+1, r24	; 0x01
     d18:	9a 83       	std	Y+2, r25	; 0x02
     d1a:	ab 83       	std	Y+3, r26	; 0x03
     d1c:	bc 83       	std	Y+4, r27	; 0x04
	temp |= (ADCH << 8);
     d1e:	e5 e2       	ldi	r30, 0x25	; 37
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	88 2f       	mov	r24, r24
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	98 2f       	mov	r25, r24
     d2a:	88 27       	eor	r24, r24
     d2c:	9c 01       	movw	r18, r24
     d2e:	44 27       	eor	r20, r20
     d30:	37 fd       	sbrc	r19, 7
     d32:	40 95       	com	r20
     d34:	54 2f       	mov	r21, r20
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	9a 81       	ldd	r25, Y+2	; 0x02
     d3a:	ab 81       	ldd	r26, Y+3	; 0x03
     d3c:	bc 81       	ldd	r27, Y+4	; 0x04
     d3e:	82 2b       	or	r24, r18
     d40:	93 2b       	or	r25, r19
     d42:	a4 2b       	or	r26, r20
     d44:	b5 2b       	or	r27, r21
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	9a 83       	std	Y+2, r25	; 0x02
     d4a:	ab 83       	std	Y+3, r26	; 0x03
     d4c:	bc 83       	std	Y+4, r27	; 0x04
	return temp;
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <DIO_WriteChannel>:
*  Author: user
*/

#include "DIO.h"

void DIO_WriteChannel(DIO_ChannelTypes channelId,STD_LevelTypes level){
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	00 d0       	rcall	.+0      	; 0xd68 <DIO_WriteChannel+0x6>
     d68:	00 d0       	rcall	.+0      	; 0xd6a <DIO_WriteChannel+0x8>
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <DIO_WriteChannel+0xa>
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	8b 83       	std	Y+3, r24	; 0x03
     d72:	6c 83       	std	Y+4, r22	; 0x04
	DIO_PortTypes Portx	= channelId/8;
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	86 95       	lsr	r24
     d78:	86 95       	lsr	r24
     d7a:	86 95       	lsr	r24
     d7c:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ChannelTypes BitNo = channelId%8;
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	87 70       	andi	r24, 0x07	; 7
     d82:	89 83       	std	Y+1, r24	; 0x01
	switch (Portx)
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	3e 83       	std	Y+6, r19	; 0x06
     d8c:	2d 83       	std	Y+5, r18	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	91 05       	cpc	r25, r1
     d96:	09 f4       	brne	.+2      	; 0xd9a <DIO_WriteChannel+0x38>
     d98:	43 c0       	rjmp	.+134    	; 0xe20 <DIO_WriteChannel+0xbe>
     d9a:	2d 81       	ldd	r18, Y+5	; 0x05
     d9c:	3e 81       	ldd	r19, Y+6	; 0x06
     d9e:	22 30       	cpi	r18, 0x02	; 2
     da0:	31 05       	cpc	r19, r1
     da2:	2c f4       	brge	.+10     	; 0xdae <DIO_WriteChannel+0x4c>
     da4:	8d 81       	ldd	r24, Y+5	; 0x05
     da6:	9e 81       	ldd	r25, Y+6	; 0x06
     da8:	00 97       	sbiw	r24, 0x00	; 0
     daa:	71 f0       	breq	.+28     	; 0xdc8 <DIO_WriteChannel+0x66>
     dac:	bc c0       	rjmp	.+376    	; 0xf26 <DIO_WriteChannel+0x1c4>
     dae:	2d 81       	ldd	r18, Y+5	; 0x05
     db0:	3e 81       	ldd	r19, Y+6	; 0x06
     db2:	22 30       	cpi	r18, 0x02	; 2
     db4:	31 05       	cpc	r19, r1
     db6:	09 f4       	brne	.+2      	; 0xdba <DIO_WriteChannel+0x58>
     db8:	5f c0       	rjmp	.+190    	; 0xe78 <DIO_WriteChannel+0x116>
     dba:	8d 81       	ldd	r24, Y+5	; 0x05
     dbc:	9e 81       	ldd	r25, Y+6	; 0x06
     dbe:	83 30       	cpi	r24, 0x03	; 3
     dc0:	91 05       	cpc	r25, r1
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <DIO_WriteChannel+0x64>
     dc4:	85 c0       	rjmp	.+266    	; 0xed0 <DIO_WriteChannel+0x16e>
     dc6:	af c0       	rjmp	.+350    	; 0xf26 <DIO_WriteChannel+0x1c4>
	{
		case DIO_PortA:
		if (level == STD_High)
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	a1 f4       	brne	.+40     	; 0xdf6 <DIO_WriteChannel+0x94>
		{
			SetBit(PORTA_Reg,BitNo);
     dce:	ab e3       	ldi	r26, 0x3B	; 59
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	eb e3       	ldi	r30, 0x3B	; 59
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 2e       	mov	r0, r18
     de6:	02 c0       	rjmp	.+4      	; 0xdec <DIO_WriteChannel+0x8a>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <DIO_WriteChannel+0x86>
     df0:	84 2b       	or	r24, r20
     df2:	8c 93       	st	X, r24
     df4:	98 c0       	rjmp	.+304    	; 0xf26 <DIO_WriteChannel+0x1c4>
		}
		else{
			ClearBit(PORTA_Reg,BitNo);
     df6:	ab e3       	ldi	r26, 0x3B	; 59
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	eb e3       	ldi	r30, 0x3B	; 59
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_WriteChannel+0xb2>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_WriteChannel+0xae>
     e18:	80 95       	com	r24
     e1a:	84 23       	and	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	83 c0       	rjmp	.+262    	; 0xf26 <DIO_WriteChannel+0x1c4>
		}
		break;
		case DIO_PortB:
		if (level == STD_High)
     e20:	8c 81       	ldd	r24, Y+4	; 0x04
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	a1 f4       	brne	.+40     	; 0xe4e <DIO_WriteChannel+0xec>
		{
			SetBit(PORTB_Reg,BitNo);
     e26:	a8 e3       	ldi	r26, 0x38	; 56
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e8 e3       	ldi	r30, 0x38	; 56
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_WriteChannel+0xe2>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_WriteChannel+0xde>
     e48:	84 2b       	or	r24, r20
     e4a:	8c 93       	st	X, r24
     e4c:	6c c0       	rjmp	.+216    	; 0xf26 <DIO_WriteChannel+0x1c4>
		}
		else{
			ClearBit(PORTB_Reg,BitNo);
     e4e:	a8 e3       	ldi	r26, 0x38	; 56
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e8 e3       	ldi	r30, 0x38	; 56
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 2e       	mov	r0, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_WriteChannel+0x10a>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_WriteChannel+0x106>
     e70:	80 95       	com	r24
     e72:	84 23       	and	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	57 c0       	rjmp	.+174    	; 0xf26 <DIO_WriteChannel+0x1c4>
		}
		break;
		case DIO_PortC:
		if (level == STD_High)
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	a1 f4       	brne	.+40     	; 0xea6 <DIO_WriteChannel+0x144>
		{
			SetBit(PORTC_Reg,BitNo);
     e7e:	a5 e3       	ldi	r26, 0x35	; 53
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e5 e3       	ldi	r30, 0x35	; 53
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_WriteChannel+0x13a>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_WriteChannel+0x136>
     ea0:	84 2b       	or	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	40 c0       	rjmp	.+128    	; 0xf26 <DIO_WriteChannel+0x1c4>
		}
		else{
			ClearBit(PORTC_Reg,BitNo);
     ea6:	a5 e3       	ldi	r26, 0x35	; 53
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e5 e3       	ldi	r30, 0x35	; 53
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 2e       	mov	r0, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <DIO_WriteChannel+0x162>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <DIO_WriteChannel+0x15e>
     ec8:	80 95       	com	r24
     eca:	84 23       	and	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	2b c0       	rjmp	.+86     	; 0xf26 <DIO_WriteChannel+0x1c4>
		}
		break;
		case DIO_PortD:
		if (level == STD_High)
     ed0:	8c 81       	ldd	r24, Y+4	; 0x04
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	a1 f4       	brne	.+40     	; 0xefe <DIO_WriteChannel+0x19c>
		{
			SetBit(PORTD_Reg,BitNo);
     ed6:	a2 e3       	ldi	r26, 0x32	; 50
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e2 e3       	ldi	r30, 0x32	; 50
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <DIO_WriteChannel+0x192>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <DIO_WriteChannel+0x18e>
     ef8:	84 2b       	or	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	14 c0       	rjmp	.+40     	; 0xf26 <DIO_WriteChannel+0x1c4>
		}
		else{
			ClearBit(PORTD_Reg,BitNo);
     efe:	a2 e3       	ldi	r26, 0x32	; 50
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e2 e3       	ldi	r30, 0x32	; 50
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_WriteChannel+0x1ba>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_WriteChannel+0x1b6>
     f20:	80 95       	com	r24
     f22:	84 23       	and	r24, r20
     f24:	8c 93       	st	X, r24
		}
		break;
	}
}
     f26:	26 96       	adiw	r28, 0x06	; 6
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <DIO_ReadChannel>:


STD_LevelTypes DIO_ReadChannel(DIO_ChannelTypes channelId){
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <DIO_ReadChannel+0x6>
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <DIO_ReadChannel+0x8>
     f40:	00 d0       	rcall	.+0      	; 0xf42 <DIO_ReadChannel+0xa>
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	8c 83       	std	Y+4, r24	; 0x04
	DIO_PortTypes Portx	= channelId/8;
     f48:	8c 81       	ldd	r24, Y+4	; 0x04
     f4a:	86 95       	lsr	r24
     f4c:	86 95       	lsr	r24
     f4e:	86 95       	lsr	r24
     f50:	8b 83       	std	Y+3, r24	; 0x03
	DIO_ChannelTypes BitNo = channelId%8;
     f52:	8c 81       	ldd	r24, Y+4	; 0x04
     f54:	87 70       	andi	r24, 0x07	; 7
     f56:	8a 83       	std	Y+2, r24	; 0x02
	STD_LevelTypes BitValue = STD_Low;
     f58:	19 82       	std	Y+1, r1	; 0x01
	switch(Portx){
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	3e 83       	std	Y+6, r19	; 0x06
     f62:	2d 83       	std	Y+5, r18	; 0x05
     f64:	4d 81       	ldd	r20, Y+5	; 0x05
     f66:	5e 81       	ldd	r21, Y+6	; 0x06
     f68:	41 30       	cpi	r20, 0x01	; 1
     f6a:	51 05       	cpc	r21, r1
     f6c:	41 f1       	breq	.+80     	; 0xfbe <DIO_ReadChannel+0x86>
     f6e:	8d 81       	ldd	r24, Y+5	; 0x05
     f70:	9e 81       	ldd	r25, Y+6	; 0x06
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	91 05       	cpc	r25, r1
     f76:	34 f4       	brge	.+12     	; 0xf84 <DIO_ReadChannel+0x4c>
     f78:	2d 81       	ldd	r18, Y+5	; 0x05
     f7a:	3e 81       	ldd	r19, Y+6	; 0x06
     f7c:	21 15       	cp	r18, r1
     f7e:	31 05       	cpc	r19, r1
     f80:	61 f0       	breq	.+24     	; 0xf9a <DIO_ReadChannel+0x62>
     f82:	52 c0       	rjmp	.+164    	; 0x1028 <DIO_ReadChannel+0xf0>
     f84:	4d 81       	ldd	r20, Y+5	; 0x05
     f86:	5e 81       	ldd	r21, Y+6	; 0x06
     f88:	42 30       	cpi	r20, 0x02	; 2
     f8a:	51 05       	cpc	r21, r1
     f8c:	51 f1       	breq	.+84     	; 0xfe2 <DIO_ReadChannel+0xaa>
     f8e:	8d 81       	ldd	r24, Y+5	; 0x05
     f90:	9e 81       	ldd	r25, Y+6	; 0x06
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	91 05       	cpc	r25, r1
     f96:	b9 f1       	breq	.+110    	; 0x1006 <DIO_ReadChannel+0xce>
     f98:	47 c0       	rjmp	.+142    	; 0x1028 <DIO_ReadChannel+0xf0>
		case DIO_PortA:
		BitValue = GetBit(PINA_Reg,BitNo);
     f9a:	e9 e3       	ldi	r30, 0x39	; 57
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a9 01       	movw	r20, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_ReadChannel+0x7a>
     fae:	55 95       	asr	r21
     fb0:	47 95       	ror	r20
     fb2:	8a 95       	dec	r24
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_ReadChannel+0x76>
     fb6:	ca 01       	movw	r24, r20
     fb8:	81 70       	andi	r24, 0x01	; 1
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	35 c0       	rjmp	.+106    	; 0x1028 <DIO_ReadChannel+0xf0>
		break;
		case DIO_PortB:
		BitValue = GetBit(PINB_Reg,BitNo);
     fbe:	e6 e3       	ldi	r30, 0x36	; 54
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a9 01       	movw	r20, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_ReadChannel+0x9e>
     fd2:	55 95       	asr	r21
     fd4:	47 95       	ror	r20
     fd6:	8a 95       	dec	r24
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_ReadChannel+0x9a>
     fda:	ca 01       	movw	r24, r20
     fdc:	81 70       	andi	r24, 0x01	; 1
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	23 c0       	rjmp	.+70     	; 0x1028 <DIO_ReadChannel+0xf0>
		break;
		case DIO_PortC:
		BitValue = GetBit(PINC_Reg,BitNo);
     fe2:	e3 e3       	ldi	r30, 0x33	; 51
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a9 01       	movw	r20, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_ReadChannel+0xc2>
     ff6:	55 95       	asr	r21
     ff8:	47 95       	ror	r20
     ffa:	8a 95       	dec	r24
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_ReadChannel+0xbe>
     ffe:	ca 01       	movw	r24, r20
    1000:	81 70       	andi	r24, 0x01	; 1
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	11 c0       	rjmp	.+34     	; 0x1028 <DIO_ReadChannel+0xf0>
		break;
		case DIO_PortD:
		BitValue = GetBit(PIND_Reg,BitNo);
    1006:	e0 e3       	ldi	r30, 0x30	; 48
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	a9 01       	movw	r20, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_ReadChannel+0xe6>
    101a:	55 95       	asr	r21
    101c:	47 95       	ror	r20
    101e:	8a 95       	dec	r24
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_ReadChannel+0xe2>
    1022:	ca 01       	movw	r24, r20
    1024:	81 70       	andi	r24, 0x01	; 1
    1026:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return BitValue;
    1028:	89 81       	ldd	r24, Y+1	; 0x01
}
    102a:	26 96       	adiw	r28, 0x06	; 6
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <DIO_WritePort>:

void DIO_WritePort(DIO_PortTypes PortId,Uint8 Data){
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	00 d0       	rcall	.+0      	; 0x1042 <DIO_WritePort+0x6>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <DIO_WritePort+0x8>
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	6a 83       	std	Y+2, r22	; 0x02
	switch (PortId)
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	3c 83       	std	Y+4, r19	; 0x04
    1054:	2b 83       	std	Y+3, r18	; 0x03
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	91 05       	cpc	r25, r1
    105e:	d1 f0       	breq	.+52     	; 0x1094 <DIO_WritePort+0x58>
    1060:	2b 81       	ldd	r18, Y+3	; 0x03
    1062:	3c 81       	ldd	r19, Y+4	; 0x04
    1064:	22 30       	cpi	r18, 0x02	; 2
    1066:	31 05       	cpc	r19, r1
    1068:	2c f4       	brge	.+10     	; 0x1074 <DIO_WritePort+0x38>
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	61 f0       	breq	.+24     	; 0x108a <DIO_WritePort+0x4e>
    1072:	1e c0       	rjmp	.+60     	; 0x10b0 <DIO_WritePort+0x74>
    1074:	2b 81       	ldd	r18, Y+3	; 0x03
    1076:	3c 81       	ldd	r19, Y+4	; 0x04
    1078:	22 30       	cpi	r18, 0x02	; 2
    107a:	31 05       	cpc	r19, r1
    107c:	81 f0       	breq	.+32     	; 0x109e <DIO_WritePort+0x62>
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	83 30       	cpi	r24, 0x03	; 3
    1084:	91 05       	cpc	r25, r1
    1086:	81 f0       	breq	.+32     	; 0x10a8 <DIO_WritePort+0x6c>
    1088:	13 c0       	rjmp	.+38     	; 0x10b0 <DIO_WritePort+0x74>
	{
		case DIO_PortA:
		PORTA_Reg = Data;
    108a:	eb e3       	ldi	r30, 0x3B	; 59
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	80 83       	st	Z, r24
    1092:	0e c0       	rjmp	.+28     	; 0x10b0 <DIO_WritePort+0x74>
		break;
		case DIO_PortB:
		PORTB_Reg = Data;
    1094:	e8 e3       	ldi	r30, 0x38	; 56
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	80 83       	st	Z, r24
    109c:	09 c0       	rjmp	.+18     	; 0x10b0 <DIO_WritePort+0x74>
		break;
		case DIO_PortC:
		PORTC_Reg = Data;
    109e:	e5 e3       	ldi	r30, 0x35	; 53
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	80 83       	st	Z, r24
    10a6:	04 c0       	rjmp	.+8      	; 0x10b0 <DIO_WritePort+0x74>
		break;
		case DIO_PortD:
		PORTD_Reg = Data;
    10a8:	e2 e3       	ldi	r30, 0x32	; 50
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	80 83       	st	Z, r24
		break;
	}
}
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <DIO_ReadPort>:

Uint8 DIO_ReadPort(DIO_PortTypes PortId){
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <DIO_ReadPort+0x6>
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <DIO_ReadPort+0x8>
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	8a 83       	std	Y+2, r24	; 0x02
	Uint8 Data = 0;
    10cc:	19 82       	std	Y+1, r1	; 0x01
	switch (PortId)
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	3c 83       	std	Y+4, r19	; 0x04
    10d6:	2b 83       	std	Y+3, r18	; 0x03
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	91 05       	cpc	r25, r1
    10e0:	d1 f0       	breq	.+52     	; 0x1116 <DIO_ReadPort+0x58>
    10e2:	2b 81       	ldd	r18, Y+3	; 0x03
    10e4:	3c 81       	ldd	r19, Y+4	; 0x04
    10e6:	22 30       	cpi	r18, 0x02	; 2
    10e8:	31 05       	cpc	r19, r1
    10ea:	2c f4       	brge	.+10     	; 0x10f6 <DIO_ReadPort+0x38>
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	61 f0       	breq	.+24     	; 0x110c <DIO_ReadPort+0x4e>
    10f4:	1e c0       	rjmp	.+60     	; 0x1132 <DIO_ReadPort+0x74>
    10f6:	2b 81       	ldd	r18, Y+3	; 0x03
    10f8:	3c 81       	ldd	r19, Y+4	; 0x04
    10fa:	22 30       	cpi	r18, 0x02	; 2
    10fc:	31 05       	cpc	r19, r1
    10fe:	81 f0       	breq	.+32     	; 0x1120 <DIO_ReadPort+0x62>
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	91 05       	cpc	r25, r1
    1108:	81 f0       	breq	.+32     	; 0x112a <DIO_ReadPort+0x6c>
    110a:	13 c0       	rjmp	.+38     	; 0x1132 <DIO_ReadPort+0x74>
	{
		case DIO_PortA:
		Data = PORTA_Reg;
    110c:	eb e3       	ldi	r30, 0x3B	; 59
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	0e c0       	rjmp	.+28     	; 0x1132 <DIO_ReadPort+0x74>
		break;
		case DIO_PortB:
		Data = PORTB_Reg;
    1116:	e8 e3       	ldi	r30, 0x38	; 56
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <DIO_ReadPort+0x74>
		break;
		case DIO_PortC:
		Data = PORTC_Reg;
    1120:	e5 e3       	ldi	r30, 0x35	; 53
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	04 c0       	rjmp	.+8      	; 0x1132 <DIO_ReadPort+0x74>
		break;
		case DIO_PortD:
		Data = PORTD_Reg;
    112a:	e2 e3       	ldi	r30, 0x32	; 50
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Data;	
    1132:	89 81       	ldd	r24, Y+1	; 0x01
}
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <DIO_Init>:
	{Output,STD_High},
	{Input,STD_Low}
	
};

void DIO_Init(){
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	00 d0       	rcall	.+0      	; 0x1148 <DIO_Init+0x6>
    1148:	00 d0       	rcall	.+0      	; 0x114a <DIO_Init+0x8>
    114a:	0f 92       	push	r0
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
	Uint8 count = DIO_ChannelA0;
    1150:	1b 82       	std	Y+3, r1	; 0x03
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
    1152:	1b 82       	std	Y+3, r1	; 0x03
    1154:	fc c0       	rjmp	.+504    	; 0x134e <DIO_Init+0x20c>
	{
		Portx = count/8;
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	86 95       	lsr	r24
    115a:	86 95       	lsr	r24
    115c:	86 95       	lsr	r24
    115e:	8a 83       	std	Y+2, r24	; 0x02
		BitNo = count%8;
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	87 70       	andi	r24, 0x07	; 7
    1164:	89 83       	std	Y+1, r24	; 0x01
		switch(Portx){
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	3d 83       	std	Y+5, r19	; 0x05
    116e:	2c 83       	std	Y+4, r18	; 0x04
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	9d 81       	ldd	r25, Y+5	; 0x05
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	91 05       	cpc	r25, r1
    1178:	09 f4       	brne	.+2      	; 0x117c <DIO_Init+0x3a>
    117a:	4b c0       	rjmp	.+150    	; 0x1212 <DIO_Init+0xd0>
    117c:	2c 81       	ldd	r18, Y+4	; 0x04
    117e:	3d 81       	ldd	r19, Y+5	; 0x05
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	2c f4       	brge	.+10     	; 0x1190 <DIO_Init+0x4e>
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
    1188:	9d 81       	ldd	r25, Y+5	; 0x05
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	71 f0       	breq	.+28     	; 0x11aa <DIO_Init+0x68>
    118e:	dc c0       	rjmp	.+440    	; 0x1348 <DIO_Init+0x206>
    1190:	2c 81       	ldd	r18, Y+4	; 0x04
    1192:	3d 81       	ldd	r19, Y+5	; 0x05
    1194:	22 30       	cpi	r18, 0x02	; 2
    1196:	31 05       	cpc	r19, r1
    1198:	09 f4       	brne	.+2      	; 0x119c <DIO_Init+0x5a>
    119a:	6f c0       	rjmp	.+222    	; 0x127a <DIO_Init+0x138>
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	9d 81       	ldd	r25, Y+5	; 0x05
    11a0:	83 30       	cpi	r24, 0x03	; 3
    11a2:	91 05       	cpc	r25, r1
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <DIO_Init+0x66>
    11a6:	9d c0       	rjmp	.+314    	; 0x12e2 <DIO_Init+0x1a0>
    11a8:	cf c0       	rjmp	.+414    	; 0x1348 <DIO_Init+0x206>
			case DIO_PortA:
			if(PinDirInit[count].PinDir == Output){
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	fc 01       	movw	r30, r24
    11b6:	e6 58       	subi	r30, 0x86	; 134
    11b8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ba:	80 81       	ld	r24, Z
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	a1 f4       	brne	.+40     	; 0x11e8 <DIO_Init+0xa6>
				SetBit(DDRA_Reg,BitNo);
    11c0:	aa e3       	ldi	r26, 0x3A	; 58
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	ea e3       	ldi	r30, 0x3A	; 58
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <DIO_Init+0x9c>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <DIO_Init+0x98>
    11e2:	84 2b       	or	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	b0 c0       	rjmp	.+352    	; 0x1348 <DIO_Init+0x206>
			}
			else{
				ClearBit(DDRA_Reg,BitNo);
    11e8:	aa e3       	ldi	r26, 0x3A	; 58
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	ea e3       	ldi	r30, 0x3A	; 58
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <DIO_Init+0xc4>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <DIO_Init+0xc0>
    120a:	80 95       	com	r24
    120c:	84 23       	and	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	9b c0       	rjmp	.+310    	; 0x1348 <DIO_Init+0x206>
			}
			break;
			case DIO_PortB:
			if(PinDirInit[count].PinDir == Output){
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	fc 01       	movw	r30, r24
    121e:	e6 58       	subi	r30, 0x86	; 134
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	80 81       	ld	r24, Z
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	a1 f4       	brne	.+40     	; 0x1250 <DIO_Init+0x10e>
				SetBit(DDRB_Reg,BitNo);
    1228:	a7 e3       	ldi	r26, 0x37	; 55
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e7 e3       	ldi	r30, 0x37	; 55
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_Init+0x104>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_Init+0x100>
    124a:	84 2b       	or	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	7c c0       	rjmp	.+248    	; 0x1348 <DIO_Init+0x206>
			}
			else{
				ClearBit(DDRB_Reg,BitNo);
    1250:	a7 e3       	ldi	r26, 0x37	; 55
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e7 e3       	ldi	r30, 0x37	; 55
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_Init+0x12c>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_Init+0x128>
    1272:	80 95       	com	r24
    1274:	84 23       	and	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	67 c0       	rjmp	.+206    	; 0x1348 <DIO_Init+0x206>
			}
			break;
			case DIO_PortC:
			if(PinDirInit[count].PinDir == Output){
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	88 2f       	mov	r24, r24
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	fc 01       	movw	r30, r24
    1286:	e6 58       	subi	r30, 0x86	; 134
    1288:	ff 4f       	sbci	r31, 0xFF	; 255
    128a:	80 81       	ld	r24, Z
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	a1 f4       	brne	.+40     	; 0x12b8 <DIO_Init+0x176>
				SetBit(DDRC_Reg,BitNo);
    1290:	a4 e3       	ldi	r26, 0x34	; 52
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e4 e3       	ldi	r30, 0x34	; 52
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_Init+0x16c>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_Init+0x168>
    12b2:	84 2b       	or	r24, r20
    12b4:	8c 93       	st	X, r24
    12b6:	48 c0       	rjmp	.+144    	; 0x1348 <DIO_Init+0x206>
			}
			else{
				ClearBit(DDRC_Reg,BitNo);
    12b8:	a4 e3       	ldi	r26, 0x34	; 52
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e4 e3       	ldi	r30, 0x34	; 52
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 2e       	mov	r0, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <DIO_Init+0x194>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <DIO_Init+0x190>
    12da:	80 95       	com	r24
    12dc:	84 23       	and	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	33 c0       	rjmp	.+102    	; 0x1348 <DIO_Init+0x206>
			}
			break;
			case DIO_PortD:
			if(PinDirInit[count].PinDir == Output){
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	88 2f       	mov	r24, r24
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	fc 01       	movw	r30, r24
    12ee:	e6 58       	subi	r30, 0x86	; 134
    12f0:	ff 4f       	sbci	r31, 0xFF	; 255
    12f2:	80 81       	ld	r24, Z
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	a1 f4       	brne	.+40     	; 0x1320 <DIO_Init+0x1de>
				SetBit(DDRD_Reg,BitNo);
    12f8:	a1 e3       	ldi	r26, 0x31	; 49
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e1 e3       	ldi	r30, 0x31	; 49
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_Init+0x1d4>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_Init+0x1d0>
    131a:	84 2b       	or	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	14 c0       	rjmp	.+40     	; 0x1348 <DIO_Init+0x206>
			}
			else{
				ClearBit(DDRD_Reg,BitNo);
    1320:	a1 e3       	ldi	r26, 0x31	; 49
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e1 e3       	ldi	r30, 0x31	; 49
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <DIO_Init+0x1fc>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <DIO_Init+0x1f8>
    1342:	80 95       	com	r24
    1344:	84 23       	and	r24, r20
    1346:	8c 93       	st	X, r24

void DIO_Init(){
	Uint8 count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	8f 5f       	subi	r24, 0xFF	; 255
    134c:	8b 83       	std	Y+3, r24	; 0x03
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	80 32       	cpi	r24, 0x20	; 32
    1352:	08 f4       	brcc	.+2      	; 0x1356 <DIO_Init+0x214>
    1354:	00 cf       	rjmp	.-512    	; 0x1156 <DIO_Init+0x14>
				ClearBit(DDRD_Reg,BitNo);
			}
			break;
		}
	}
}
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <LCD_Init>:
*  Author: user
*/

#include "LCD.h"

void LCD_Init(void){
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	a6 97       	sbiw	r28, 0x26	; 38
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
	DIO_WriteChannel(LCD_RW,STD_Low);
    137a:	8a e0       	ldi	r24, 0x0A	; 10
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_E,STD_High);
    1382:	8b e0       	ldi	r24, 0x0B	; 11
    1384:	61 e0       	ldi	r22, 0x01	; 1
    1386:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_WriteChannel>
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	a0 ea       	ldi	r26, 0xA0	; 160
    1390:	b1 e4       	ldi	r27, 0x41	; 65
    1392:	8b a3       	std	Y+35, r24	; 0x23
    1394:	9c a3       	std	Y+36, r25	; 0x24
    1396:	ad a3       	std	Y+37, r26	; 0x25
    1398:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    139a:	6b a1       	ldd	r22, Y+35	; 0x23
    139c:	7c a1       	ldd	r23, Y+36	; 0x24
    139e:	8d a1       	ldd	r24, Y+37	; 0x25
    13a0:	9e a1       	ldd	r25, Y+38	; 0x26
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	4a ef       	ldi	r20, 0xFA	; 250
    13a8:	54 e4       	ldi	r21, 0x44	; 68
    13aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	8f 8f       	std	Y+31, r24	; 0x1f
    13b4:	98 a3       	std	Y+32, r25	; 0x20
    13b6:	a9 a3       	std	Y+33, r26	; 0x21
    13b8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    13ba:	6f 8d       	ldd	r22, Y+31	; 0x1f
    13bc:	78 a1       	ldd	r23, Y+32	; 0x20
    13be:	89 a1       	ldd	r24, Y+33	; 0x21
    13c0:	9a a1       	ldd	r25, Y+34	; 0x22
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e8       	ldi	r20, 0x80	; 128
    13c8:	5f e3       	ldi	r21, 0x3F	; 63
    13ca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    13ce:	88 23       	and	r24, r24
    13d0:	2c f4       	brge	.+10     	; 0x13dc <LCD_Init+0x76>
		__ticks = 1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9e 8f       	std	Y+30, r25	; 0x1e
    13d8:	8d 8f       	std	Y+29, r24	; 0x1d
    13da:	3f c0       	rjmp	.+126    	; 0x145a <LCD_Init+0xf4>
	else if (__tmp > 65535)
    13dc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    13de:	78 a1       	ldd	r23, Y+32	; 0x20
    13e0:	89 a1       	ldd	r24, Y+33	; 0x21
    13e2:	9a a1       	ldd	r25, Y+34	; 0x22
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	3f ef       	ldi	r19, 0xFF	; 255
    13e8:	4f e7       	ldi	r20, 0x7F	; 127
    13ea:	57 e4       	ldi	r21, 0x47	; 71
    13ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    13f0:	18 16       	cp	r1, r24
    13f2:	4c f5       	brge	.+82     	; 0x1446 <LCD_Init+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f4:	6b a1       	ldd	r22, Y+35	; 0x23
    13f6:	7c a1       	ldd	r23, Y+36	; 0x24
    13f8:	8d a1       	ldd	r24, Y+37	; 0x25
    13fa:	9e a1       	ldd	r25, Y+38	; 0x26
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e2       	ldi	r20, 0x20	; 32
    1402:	51 e4       	ldi	r21, 0x41	; 65
    1404:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	bc 01       	movw	r22, r24
    140e:	cd 01       	movw	r24, r26
    1410:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	9e 8f       	std	Y+30, r25	; 0x1e
    141a:	8d 8f       	std	Y+29, r24	; 0x1d
    141c:	0f c0       	rjmp	.+30     	; 0x143c <LCD_Init+0xd6>
    141e:	88 ec       	ldi	r24, 0xC8	; 200
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	9c 8f       	std	Y+28, r25	; 0x1c
    1424:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1426:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1428:	9c 8d       	ldd	r25, Y+28	; 0x1c
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	f1 f7       	brne	.-4      	; 0x142a <LCD_Init+0xc4>
    142e:	9c 8f       	std	Y+28, r25	; 0x1c
    1430:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1432:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1434:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	9e 8f       	std	Y+30, r25	; 0x1e
    143a:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    143e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	69 f7       	brne	.-38     	; 0x141e <LCD_Init+0xb8>
    1444:	14 c0       	rjmp	.+40     	; 0x146e <LCD_Init+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1446:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1448:	78 a1       	ldd	r23, Y+32	; 0x20
    144a:	89 a1       	ldd	r24, Y+33	; 0x21
    144c:	9a a1       	ldd	r25, Y+34	; 0x22
    144e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	9e 8f       	std	Y+30, r25	; 0x1e
    1458:	8d 8f       	std	Y+29, r24	; 0x1d
    145a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    145c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    145e:	9a 8f       	std	Y+26, r25	; 0x1a
    1460:	89 8f       	std	Y+25, r24	; 0x19
    1462:	89 8d       	ldd	r24, Y+25	; 0x19
    1464:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <LCD_Init+0x100>
    146a:	9a 8f       	std	Y+26, r25	; 0x1a
    146c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(20);
	LCD_Cmd(0x33);
    146e:	83 e3       	ldi	r24, 0x33	; 51
    1470:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Cmd>
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	a8 ec       	ldi	r26, 0xC8	; 200
    147a:	b2 e4       	ldi	r27, 0x42	; 66
    147c:	8d 8b       	std	Y+21, r24	; 0x15
    147e:	9e 8b       	std	Y+22, r25	; 0x16
    1480:	af 8b       	std	Y+23, r26	; 0x17
    1482:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1484:	6d 89       	ldd	r22, Y+21	; 0x15
    1486:	7e 89       	ldd	r23, Y+22	; 0x16
    1488:	8f 89       	ldd	r24, Y+23	; 0x17
    148a:	98 8d       	ldd	r25, Y+24	; 0x18
    148c:	2b ea       	ldi	r18, 0xAB	; 171
    148e:	3a ea       	ldi	r19, 0xAA	; 170
    1490:	4a e2       	ldi	r20, 0x2A	; 42
    1492:	50 e4       	ldi	r21, 0x40	; 64
    1494:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	89 8b       	std	Y+17, r24	; 0x11
    149e:	9a 8b       	std	Y+18, r25	; 0x12
    14a0:	ab 8b       	std	Y+19, r26	; 0x13
    14a2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    14a4:	69 89       	ldd	r22, Y+17	; 0x11
    14a6:	7a 89       	ldd	r23, Y+18	; 0x12
    14a8:	8b 89       	ldd	r24, Y+19	; 0x13
    14aa:	9c 89       	ldd	r25, Y+20	; 0x14
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e8       	ldi	r20, 0x80	; 128
    14b2:	5f e3       	ldi	r21, 0x3F	; 63
    14b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14b8:	88 23       	and	r24, r24
    14ba:	1c f4       	brge	.+6      	; 0x14c2 <LCD_Init+0x15c>
		__ticks = 1;
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	88 8b       	std	Y+16, r24	; 0x10
    14c0:	91 c0       	rjmp	.+290    	; 0x15e4 <LCD_Init+0x27e>
	else if (__tmp > 255)
    14c2:	69 89       	ldd	r22, Y+17	; 0x11
    14c4:	7a 89       	ldd	r23, Y+18	; 0x12
    14c6:	8b 89       	ldd	r24, Y+19	; 0x13
    14c8:	9c 89       	ldd	r25, Y+20	; 0x14
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	4f e7       	ldi	r20, 0x7F	; 127
    14d0:	53 e4       	ldi	r21, 0x43	; 67
    14d2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14d6:	18 16       	cp	r1, r24
    14d8:	0c f0       	brlt	.+2      	; 0x14dc <LCD_Init+0x176>
    14da:	7b c0       	rjmp	.+246    	; 0x15d2 <LCD_Init+0x26c>
	{
		_delay_ms(__us / 1000.0);
    14dc:	6d 89       	ldd	r22, Y+21	; 0x15
    14de:	7e 89       	ldd	r23, Y+22	; 0x16
    14e0:	8f 89       	ldd	r24, Y+23	; 0x17
    14e2:	98 8d       	ldd	r25, Y+24	; 0x18
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	4a e7       	ldi	r20, 0x7A	; 122
    14ea:	54 e4       	ldi	r21, 0x44	; 68
    14ec:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	8c 87       	std	Y+12, r24	; 0x0c
    14f6:	9d 87       	std	Y+13, r25	; 0x0d
    14f8:	ae 87       	std	Y+14, r26	; 0x0e
    14fa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    14fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    1500:	8e 85       	ldd	r24, Y+14	; 0x0e
    1502:	9f 85       	ldd	r25, Y+15	; 0x0f
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	4a ef       	ldi	r20, 0xFA	; 250
    150a:	54 e4       	ldi	r21, 0x44	; 68
    150c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	88 87       	std	Y+8, r24	; 0x08
    1516:	99 87       	std	Y+9, r25	; 0x09
    1518:	aa 87       	std	Y+10, r26	; 0x0a
    151a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    151c:	68 85       	ldd	r22, Y+8	; 0x08
    151e:	79 85       	ldd	r23, Y+9	; 0x09
    1520:	8a 85       	ldd	r24, Y+10	; 0x0a
    1522:	9b 85       	ldd	r25, Y+11	; 0x0b
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	40 e8       	ldi	r20, 0x80	; 128
    152a:	5f e3       	ldi	r21, 0x3F	; 63
    152c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1530:	88 23       	and	r24, r24
    1532:	2c f4       	brge	.+10     	; 0x153e <LCD_Init+0x1d8>
		__ticks = 1;
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	9f 83       	std	Y+7, r25	; 0x07
    153a:	8e 83       	std	Y+6, r24	; 0x06
    153c:	3f c0       	rjmp	.+126    	; 0x15bc <LCD_Init+0x256>
	else if (__tmp > 65535)
    153e:	68 85       	ldd	r22, Y+8	; 0x08
    1540:	79 85       	ldd	r23, Y+9	; 0x09
    1542:	8a 85       	ldd	r24, Y+10	; 0x0a
    1544:	9b 85       	ldd	r25, Y+11	; 0x0b
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	3f ef       	ldi	r19, 0xFF	; 255
    154a:	4f e7       	ldi	r20, 0x7F	; 127
    154c:	57 e4       	ldi	r21, 0x47	; 71
    154e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1552:	18 16       	cp	r1, r24
    1554:	4c f5       	brge	.+82     	; 0x15a8 <LCD_Init+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1556:	6c 85       	ldd	r22, Y+12	; 0x0c
    1558:	7d 85       	ldd	r23, Y+13	; 0x0d
    155a:	8e 85       	ldd	r24, Y+14	; 0x0e
    155c:	9f 85       	ldd	r25, Y+15	; 0x0f
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e2       	ldi	r20, 0x20	; 32
    1564:	51 e4       	ldi	r21, 0x41	; 65
    1566:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	bc 01       	movw	r22, r24
    1570:	cd 01       	movw	r24, r26
    1572:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	9f 83       	std	Y+7, r25	; 0x07
    157c:	8e 83       	std	Y+6, r24	; 0x06
    157e:	0f c0       	rjmp	.+30     	; 0x159e <LCD_Init+0x238>
    1580:	88 ec       	ldi	r24, 0xC8	; 200
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	9d 83       	std	Y+5, r25	; 0x05
    1586:	8c 83       	std	Y+4, r24	; 0x04
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	9d 81       	ldd	r25, Y+5	; 0x05
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <LCD_Init+0x226>
    1590:	9d 83       	std	Y+5, r25	; 0x05
    1592:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1594:	8e 81       	ldd	r24, Y+6	; 0x06
    1596:	9f 81       	ldd	r25, Y+7	; 0x07
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	9f 83       	std	Y+7, r25	; 0x07
    159c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159e:	8e 81       	ldd	r24, Y+6	; 0x06
    15a0:	9f 81       	ldd	r25, Y+7	; 0x07
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	69 f7       	brne	.-38     	; 0x1580 <LCD_Init+0x21a>
    15a6:	24 c0       	rjmp	.+72     	; 0x15f0 <LCD_Init+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a8:	68 85       	ldd	r22, Y+8	; 0x08
    15aa:	79 85       	ldd	r23, Y+9	; 0x09
    15ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    15ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    15b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	9f 83       	std	Y+7, r25	; 0x07
    15ba:	8e 83       	std	Y+6, r24	; 0x06
    15bc:	8e 81       	ldd	r24, Y+6	; 0x06
    15be:	9f 81       	ldd	r25, Y+7	; 0x07
    15c0:	9b 83       	std	Y+3, r25	; 0x03
    15c2:	8a 83       	std	Y+2, r24	; 0x02
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	9b 81       	ldd	r25, Y+3	; 0x03
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <LCD_Init+0x262>
    15cc:	9b 83       	std	Y+3, r25	; 0x03
    15ce:	8a 83       	std	Y+2, r24	; 0x02
    15d0:	0f c0       	rjmp	.+30     	; 0x15f0 <LCD_Init+0x28a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15d2:	69 89       	ldd	r22, Y+17	; 0x11
    15d4:	7a 89       	ldd	r23, Y+18	; 0x12
    15d6:	8b 89       	ldd	r24, Y+19	; 0x13
    15d8:	9c 89       	ldd	r25, Y+20	; 0x14
    15da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	88 8b       	std	Y+16, r24	; 0x10
    15e4:	88 89       	ldd	r24, Y+16	; 0x10
    15e6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	8a 95       	dec	r24
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <LCD_Init+0x284>
    15ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	LCD_Cmd(0x32);
    15f0:	82 e3       	ldi	r24, 0x32	; 50
    15f2:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Cmd>
	LCD_Cmd(0x28);//Set Function 4-Bit & 2Line & 5*8 Dots
    15f6:	88 e2       	ldi	r24, 0x28	; 40
    15f8:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Cmd>
	LCD_Cmd(0x06);//Entry Mode move to right and no shift
    15fc:	86 e0       	ldi	r24, 0x06	; 6
    15fe:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Cmd>
	LCD_Cmd(0x0C);//Display on & Cursor off and no blinking
    1602:	8c e0       	ldi	r24, 0x0C	; 12
    1604:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Cmd>
	LCD_Cmd(0x01);//Clear LCD
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Cmd>
}
    160e:	a6 96       	adiw	r28, 0x26	; 38
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <LCD_Cmd>:
void LCD_Cmd(Uint8 cmd){
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	ce 54       	subi	r28, 0x4E	; 78
    162e:	d0 40       	sbci	r29, 0x00	; 0
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	fe 01       	movw	r30, r28
    163c:	e2 5b       	subi	r30, 0xB2	; 178
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	80 83       	st	Z, r24
	Uint8 PortValue = 0;
    1642:	fe 01       	movw	r30, r28
    1644:	e3 5b       	subi	r30, 0xB3	; 179
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	10 82       	st	Z, r1
	DIO_WriteChannel(LCD_RS,STD_Low);
    164a:	89 e0       	ldi	r24, 0x09	; 9
    164c:	60 e0       	ldi	r22, 0x00	; 0
    164e:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_WriteChannel>
	PortValue = DIO_ReadPort(LCD_DataPort);
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	0e 94 5f 08 	call	0x10be	; 0x10be <DIO_ReadPort>
    1658:	fe 01       	movw	r30, r28
    165a:	e3 5b       	subi	r30, 0xB3	; 179
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	80 83       	st	Z, r24
	PortValue = (PortValue & 0x0F) | (cmd & 0xF0);
    1660:	fe 01       	movw	r30, r28
    1662:	e3 5b       	subi	r30, 0xB3	; 179
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	80 81       	ld	r24, Z
    1668:	98 2f       	mov	r25, r24
    166a:	9f 70       	andi	r25, 0x0F	; 15
    166c:	fe 01       	movw	r30, r28
    166e:	e2 5b       	subi	r30, 0xB2	; 178
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	80 81       	ld	r24, Z
    1674:	80 7f       	andi	r24, 0xF0	; 240
    1676:	89 2b       	or	r24, r25
    1678:	fe 01       	movw	r30, r28
    167a:	e3 5b       	subi	r30, 0xB3	; 179
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	80 83       	st	Z, r24
	DIO_WritePort(LCD_DataPort,PortValue);
    1680:	fe 01       	movw	r30, r28
    1682:	e3 5b       	subi	r30, 0xB3	; 179
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	60 81       	ld	r22, Z
    168a:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    168e:	8b e0       	ldi	r24, 0x0B	; 11
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_WriteChannel>
    1696:	fe 01       	movw	r30, r28
    1698:	e7 5b       	subi	r30, 0xB7	; 183
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	a8 ec       	ldi	r26, 0xC8	; 200
    16a2:	b2 e4       	ldi	r27, 0x42	; 66
    16a4:	80 83       	st	Z, r24
    16a6:	91 83       	std	Z+1, r25	; 0x01
    16a8:	a2 83       	std	Z+2, r26	; 0x02
    16aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16ac:	8e 01       	movw	r16, r28
    16ae:	0b 5b       	subi	r16, 0xBB	; 187
    16b0:	1f 4f       	sbci	r17, 0xFF	; 255
    16b2:	fe 01       	movw	r30, r28
    16b4:	e7 5b       	subi	r30, 0xB7	; 183
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	60 81       	ld	r22, Z
    16ba:	71 81       	ldd	r23, Z+1	; 0x01
    16bc:	82 81       	ldd	r24, Z+2	; 0x02
    16be:	93 81       	ldd	r25, Z+3	; 0x03
    16c0:	2b ea       	ldi	r18, 0xAB	; 171
    16c2:	3a ea       	ldi	r19, 0xAA	; 170
    16c4:	4a e2       	ldi	r20, 0x2A	; 42
    16c6:	50 e4       	ldi	r21, 0x40	; 64
    16c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	f8 01       	movw	r30, r16
    16d2:	80 83       	st	Z, r24
    16d4:	91 83       	std	Z+1, r25	; 0x01
    16d6:	a2 83       	std	Z+2, r26	; 0x02
    16d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16da:	fe 01       	movw	r30, r28
    16dc:	eb 5b       	subi	r30, 0xBB	; 187
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	60 81       	ld	r22, Z
    16e2:	71 81       	ldd	r23, Z+1	; 0x01
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	93 81       	ldd	r25, Z+3	; 0x03
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e8       	ldi	r20, 0x80	; 128
    16ee:	5f e3       	ldi	r21, 0x3F	; 63
    16f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16f4:	88 23       	and	r24, r24
    16f6:	34 f4       	brge	.+12     	; 0x1704 <LCD_Cmd+0xe4>
		__ticks = 1;
    16f8:	fe 01       	movw	r30, r28
    16fa:	ec 5b       	subi	r30, 0xBC	; 188
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	80 83       	st	Z, r24
    1702:	a7 c0       	rjmp	.+334    	; 0x1852 <LCD_Cmd+0x232>
	else if (__tmp > 255)
    1704:	fe 01       	movw	r30, r28
    1706:	eb 5b       	subi	r30, 0xBB	; 187
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	60 81       	ld	r22, Z
    170c:	71 81       	ldd	r23, Z+1	; 0x01
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	93 81       	ldd	r25, Z+3	; 0x03
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	4f e7       	ldi	r20, 0x7F	; 127
    1718:	53 e4       	ldi	r21, 0x43	; 67
    171a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    171e:	18 16       	cp	r1, r24
    1720:	0c f0       	brlt	.+2      	; 0x1724 <LCD_Cmd+0x104>
    1722:	87 c0       	rjmp	.+270    	; 0x1832 <LCD_Cmd+0x212>
	{
		_delay_ms(__us / 1000.0);
    1724:	fe 01       	movw	r30, r28
    1726:	e7 5b       	subi	r30, 0xB7	; 183
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	60 81       	ld	r22, Z
    172c:	71 81       	ldd	r23, Z+1	; 0x01
    172e:	82 81       	ldd	r24, Z+2	; 0x02
    1730:	93 81       	ldd	r25, Z+3	; 0x03
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	4a e7       	ldi	r20, 0x7A	; 122
    1738:	54 e4       	ldi	r21, 0x44	; 68
    173a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	fe 01       	movw	r30, r28
    1744:	e0 5c       	subi	r30, 0xC0	; 192
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	80 83       	st	Z, r24
    174a:	91 83       	std	Z+1, r25	; 0x01
    174c:	a2 83       	std	Z+2, r26	; 0x02
    174e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1750:	fe 01       	movw	r30, r28
    1752:	e0 5c       	subi	r30, 0xC0	; 192
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	60 81       	ld	r22, Z
    1758:	71 81       	ldd	r23, Z+1	; 0x01
    175a:	82 81       	ldd	r24, Z+2	; 0x02
    175c:	93 81       	ldd	r25, Z+3	; 0x03
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	4a ef       	ldi	r20, 0xFA	; 250
    1764:	54 e4       	ldi	r21, 0x44	; 68
    1766:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	8c af       	std	Y+60, r24	; 0x3c
    1770:	9d af       	std	Y+61, r25	; 0x3d
    1772:	ae af       	std	Y+62, r26	; 0x3e
    1774:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    1776:	6c ad       	ldd	r22, Y+60	; 0x3c
    1778:	7d ad       	ldd	r23, Y+61	; 0x3d
    177a:	8e ad       	ldd	r24, Y+62	; 0x3e
    177c:	9f ad       	ldd	r25, Y+63	; 0x3f
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e8       	ldi	r20, 0x80	; 128
    1784:	5f e3       	ldi	r21, 0x3F	; 63
    1786:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    178a:	88 23       	and	r24, r24
    178c:	2c f4       	brge	.+10     	; 0x1798 <LCD_Cmd+0x178>
		__ticks = 1;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	9b af       	std	Y+59, r25	; 0x3b
    1794:	8a af       	std	Y+58, r24	; 0x3a
    1796:	42 c0       	rjmp	.+132    	; 0x181c <LCD_Cmd+0x1fc>
	else if (__tmp > 65535)
    1798:	6c ad       	ldd	r22, Y+60	; 0x3c
    179a:	7d ad       	ldd	r23, Y+61	; 0x3d
    179c:	8e ad       	ldd	r24, Y+62	; 0x3e
    179e:	9f ad       	ldd	r25, Y+63	; 0x3f
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	3f ef       	ldi	r19, 0xFF	; 255
    17a4:	4f e7       	ldi	r20, 0x7F	; 127
    17a6:	57 e4       	ldi	r21, 0x47	; 71
    17a8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17ac:	18 16       	cp	r1, r24
    17ae:	64 f5       	brge	.+88     	; 0x1808 <LCD_Cmd+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b0:	fe 01       	movw	r30, r28
    17b2:	e0 5c       	subi	r30, 0xC0	; 192
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	60 81       	ld	r22, Z
    17b8:	71 81       	ldd	r23, Z+1	; 0x01
    17ba:	82 81       	ldd	r24, Z+2	; 0x02
    17bc:	93 81       	ldd	r25, Z+3	; 0x03
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	40 e2       	ldi	r20, 0x20	; 32
    17c4:	51 e4       	ldi	r21, 0x41	; 65
    17c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	bc 01       	movw	r22, r24
    17d0:	cd 01       	movw	r24, r26
    17d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	9b af       	std	Y+59, r25	; 0x3b
    17dc:	8a af       	std	Y+58, r24	; 0x3a
    17de:	0f c0       	rjmp	.+30     	; 0x17fe <LCD_Cmd+0x1de>
    17e0:	88 ec       	ldi	r24, 0xC8	; 200
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	99 af       	std	Y+57, r25	; 0x39
    17e6:	88 af       	std	Y+56, r24	; 0x38
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17e8:	88 ad       	ldd	r24, Y+56	; 0x38
    17ea:	99 ad       	ldd	r25, Y+57	; 0x39
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	f1 f7       	brne	.-4      	; 0x17ec <LCD_Cmd+0x1cc>
    17f0:	99 af       	std	Y+57, r25	; 0x39
    17f2:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f4:	8a ad       	ldd	r24, Y+58	; 0x3a
    17f6:	9b ad       	ldd	r25, Y+59	; 0x3b
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	9b af       	std	Y+59, r25	; 0x3b
    17fc:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fe:	8a ad       	ldd	r24, Y+58	; 0x3a
    1800:	9b ad       	ldd	r25, Y+59	; 0x3b
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	69 f7       	brne	.-38     	; 0x17e0 <LCD_Cmd+0x1c0>
    1806:	2e c0       	rjmp	.+92     	; 0x1864 <LCD_Cmd+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1808:	6c ad       	ldd	r22, Y+60	; 0x3c
    180a:	7d ad       	ldd	r23, Y+61	; 0x3d
    180c:	8e ad       	ldd	r24, Y+62	; 0x3e
    180e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1810:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	9b af       	std	Y+59, r25	; 0x3b
    181a:	8a af       	std	Y+58, r24	; 0x3a
    181c:	8a ad       	ldd	r24, Y+58	; 0x3a
    181e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1820:	9f ab       	std	Y+55, r25	; 0x37
    1822:	8e ab       	std	Y+54, r24	; 0x36
    1824:	8e a9       	ldd	r24, Y+54	; 0x36
    1826:	9f a9       	ldd	r25, Y+55	; 0x37
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <LCD_Cmd+0x208>
    182c:	9f ab       	std	Y+55, r25	; 0x37
    182e:	8e ab       	std	Y+54, r24	; 0x36
    1830:	19 c0       	rjmp	.+50     	; 0x1864 <LCD_Cmd+0x244>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1832:	8e 01       	movw	r16, r28
    1834:	0c 5b       	subi	r16, 0xBC	; 188
    1836:	1f 4f       	sbci	r17, 0xFF	; 255
    1838:	fe 01       	movw	r30, r28
    183a:	eb 5b       	subi	r30, 0xBB	; 187
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	f8 01       	movw	r30, r16
    1850:	80 83       	st	Z, r24
    1852:	fe 01       	movw	r30, r28
    1854:	ec 5b       	subi	r30, 0xBC	; 188
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	80 81       	ld	r24, Z
    185a:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    185c:	8d a9       	ldd	r24, Y+53	; 0x35
    185e:	8a 95       	dec	r24
    1860:	f1 f7       	brne	.-4      	; 0x185e <LCD_Cmd+0x23e>
    1862:	8d ab       	std	Y+53, r24	; 0x35
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    1864:	8b e0       	ldi	r24, 0x0B	; 11
    1866:	61 e0       	ldi	r22, 0x01	; 1
    1868:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_WriteChannel>
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	a0 ea       	ldi	r26, 0xA0	; 160
    1872:	b0 e4       	ldi	r27, 0x40	; 64
    1874:	89 ab       	std	Y+49, r24	; 0x31
    1876:	9a ab       	std	Y+50, r25	; 0x32
    1878:	ab ab       	std	Y+51, r26	; 0x33
    187a:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    187c:	69 a9       	ldd	r22, Y+49	; 0x31
    187e:	7a a9       	ldd	r23, Y+50	; 0x32
    1880:	8b a9       	ldd	r24, Y+51	; 0x33
    1882:	9c a9       	ldd	r25, Y+52	; 0x34
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	4a ef       	ldi	r20, 0xFA	; 250
    188a:	54 e4       	ldi	r21, 0x44	; 68
    188c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	8d a7       	std	Y+45, r24	; 0x2d
    1896:	9e a7       	std	Y+46, r25	; 0x2e
    1898:	af a7       	std	Y+47, r26	; 0x2f
    189a:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    189c:	6d a5       	ldd	r22, Y+45	; 0x2d
    189e:	7e a5       	ldd	r23, Y+46	; 0x2e
    18a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    18a2:	98 a9       	ldd	r25, Y+48	; 0x30
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e8       	ldi	r20, 0x80	; 128
    18aa:	5f e3       	ldi	r21, 0x3F	; 63
    18ac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18b0:	88 23       	and	r24, r24
    18b2:	2c f4       	brge	.+10     	; 0x18be <LCD_Cmd+0x29e>
		__ticks = 1;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	9c a7       	std	Y+44, r25	; 0x2c
    18ba:	8b a7       	std	Y+43, r24	; 0x2b
    18bc:	3f c0       	rjmp	.+126    	; 0x193c <LCD_Cmd+0x31c>
	else if (__tmp > 65535)
    18be:	6d a5       	ldd	r22, Y+45	; 0x2d
    18c0:	7e a5       	ldd	r23, Y+46	; 0x2e
    18c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    18c4:	98 a9       	ldd	r25, Y+48	; 0x30
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	3f ef       	ldi	r19, 0xFF	; 255
    18ca:	4f e7       	ldi	r20, 0x7F	; 127
    18cc:	57 e4       	ldi	r21, 0x47	; 71
    18ce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18d2:	18 16       	cp	r1, r24
    18d4:	4c f5       	brge	.+82     	; 0x1928 <LCD_Cmd+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d6:	69 a9       	ldd	r22, Y+49	; 0x31
    18d8:	7a a9       	ldd	r23, Y+50	; 0x32
    18da:	8b a9       	ldd	r24, Y+51	; 0x33
    18dc:	9c a9       	ldd	r25, Y+52	; 0x34
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e2       	ldi	r20, 0x20	; 32
    18e4:	51 e4       	ldi	r21, 0x41	; 65
    18e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	bc 01       	movw	r22, r24
    18f0:	cd 01       	movw	r24, r26
    18f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	9c a7       	std	Y+44, r25	; 0x2c
    18fc:	8b a7       	std	Y+43, r24	; 0x2b
    18fe:	0f c0       	rjmp	.+30     	; 0x191e <LCD_Cmd+0x2fe>
    1900:	88 ec       	ldi	r24, 0xC8	; 200
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	9a a7       	std	Y+42, r25	; 0x2a
    1906:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1908:	89 a5       	ldd	r24, Y+41	; 0x29
    190a:	9a a5       	ldd	r25, Y+42	; 0x2a
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	f1 f7       	brne	.-4      	; 0x190c <LCD_Cmd+0x2ec>
    1910:	9a a7       	std	Y+42, r25	; 0x2a
    1912:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1914:	8b a5       	ldd	r24, Y+43	; 0x2b
    1916:	9c a5       	ldd	r25, Y+44	; 0x2c
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	9c a7       	std	Y+44, r25	; 0x2c
    191c:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1920:	9c a5       	ldd	r25, Y+44	; 0x2c
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	69 f7       	brne	.-38     	; 0x1900 <LCD_Cmd+0x2e0>
    1926:	14 c0       	rjmp	.+40     	; 0x1950 <LCD_Cmd+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1928:	6d a5       	ldd	r22, Y+45	; 0x2d
    192a:	7e a5       	ldd	r23, Y+46	; 0x2e
    192c:	8f a5       	ldd	r24, Y+47	; 0x2f
    192e:	98 a9       	ldd	r25, Y+48	; 0x30
    1930:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	9c a7       	std	Y+44, r25	; 0x2c
    193a:	8b a7       	std	Y+43, r24	; 0x2b
    193c:	8b a5       	ldd	r24, Y+43	; 0x2b
    193e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1940:	98 a7       	std	Y+40, r25	; 0x28
    1942:	8f a3       	std	Y+39, r24	; 0x27
    1944:	8f a1       	ldd	r24, Y+39	; 0x27
    1946:	98 a5       	ldd	r25, Y+40	; 0x28
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <LCD_Cmd+0x328>
    194c:	98 a7       	std	Y+40, r25	; 0x28
    194e:	8f a3       	std	Y+39, r24	; 0x27
	
	_delay_ms(5);
	
	PortValue = DIO_ReadPort(LCD_DataPort);
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	0e 94 5f 08 	call	0x10be	; 0x10be <DIO_ReadPort>
    1956:	fe 01       	movw	r30, r28
    1958:	e3 5b       	subi	r30, 0xB3	; 179
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	80 83       	st	Z, r24
	PortValue = (PortValue & 0x0F) | (cmd << 4);
    195e:	fe 01       	movw	r30, r28
    1960:	e3 5b       	subi	r30, 0xB3	; 179
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	80 81       	ld	r24, Z
    1966:	28 2f       	mov	r18, r24
    1968:	2f 70       	andi	r18, 0x0F	; 15
    196a:	fe 01       	movw	r30, r28
    196c:	e2 5b       	subi	r30, 0xB2	; 178
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	80 81       	ld	r24, Z
    1972:	88 2f       	mov	r24, r24
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	82 95       	swap	r24
    1978:	92 95       	swap	r25
    197a:	90 7f       	andi	r25, 0xF0	; 240
    197c:	98 27       	eor	r25, r24
    197e:	80 7f       	andi	r24, 0xF0	; 240
    1980:	98 27       	eor	r25, r24
    1982:	82 2b       	or	r24, r18
    1984:	fe 01       	movw	r30, r28
    1986:	e3 5b       	subi	r30, 0xB3	; 179
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	80 83       	st	Z, r24
	DIO_WritePort(LCD_DataPort,PortValue);
    198c:	fe 01       	movw	r30, r28
    198e:	e3 5b       	subi	r30, 0xB3	; 179
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	60 81       	ld	r22, Z
    1996:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    199a:	8b e0       	ldi	r24, 0x0B	; 11
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_WriteChannel>
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a8 ec       	ldi	r26, 0xC8	; 200
    19a8:	b2 e4       	ldi	r27, 0x42	; 66
    19aa:	8b a3       	std	Y+35, r24	; 0x23
    19ac:	9c a3       	std	Y+36, r25	; 0x24
    19ae:	ad a3       	std	Y+37, r26	; 0x25
    19b0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19b2:	6b a1       	ldd	r22, Y+35	; 0x23
    19b4:	7c a1       	ldd	r23, Y+36	; 0x24
    19b6:	8d a1       	ldd	r24, Y+37	; 0x25
    19b8:	9e a1       	ldd	r25, Y+38	; 0x26
    19ba:	2b ea       	ldi	r18, 0xAB	; 171
    19bc:	3a ea       	ldi	r19, 0xAA	; 170
    19be:	4a e2       	ldi	r20, 0x2A	; 42
    19c0:	50 e4       	ldi	r21, 0x40	; 64
    19c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8f 8f       	std	Y+31, r24	; 0x1f
    19cc:	98 a3       	std	Y+32, r25	; 0x20
    19ce:	a9 a3       	std	Y+33, r26	; 0x21
    19d0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    19d2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19d4:	78 a1       	ldd	r23, Y+32	; 0x20
    19d6:	89 a1       	ldd	r24, Y+33	; 0x21
    19d8:	9a a1       	ldd	r25, Y+34	; 0x22
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e8       	ldi	r20, 0x80	; 128
    19e0:	5f e3       	ldi	r21, 0x3F	; 63
    19e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19e6:	88 23       	and	r24, r24
    19e8:	1c f4       	brge	.+6      	; 0x19f0 <LCD_Cmd+0x3d0>
		__ticks = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	8e 8f       	std	Y+30, r24	; 0x1e
    19ee:	91 c0       	rjmp	.+290    	; 0x1b12 <LCD_Cmd+0x4f2>
	else if (__tmp > 255)
    19f0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19f2:	78 a1       	ldd	r23, Y+32	; 0x20
    19f4:	89 a1       	ldd	r24, Y+33	; 0x21
    19f6:	9a a1       	ldd	r25, Y+34	; 0x22
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	4f e7       	ldi	r20, 0x7F	; 127
    19fe:	53 e4       	ldi	r21, 0x43	; 67
    1a00:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a04:	18 16       	cp	r1, r24
    1a06:	0c f0       	brlt	.+2      	; 0x1a0a <LCD_Cmd+0x3ea>
    1a08:	7b c0       	rjmp	.+246    	; 0x1b00 <LCD_Cmd+0x4e0>
	{
		_delay_ms(__us / 1000.0);
    1a0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a10:	9e a1       	ldd	r25, Y+38	; 0x26
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	4a e7       	ldi	r20, 0x7A	; 122
    1a18:	54 e4       	ldi	r21, 0x44	; 68
    1a1a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	8a 8f       	std	Y+26, r24	; 0x1a
    1a24:	9b 8f       	std	Y+27, r25	; 0x1b
    1a26:	ac 8f       	std	Y+28, r26	; 0x1c
    1a28:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a2c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a2e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a30:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	4a ef       	ldi	r20, 0xFA	; 250
    1a38:	54 e4       	ldi	r21, 0x44	; 68
    1a3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	8e 8b       	std	Y+22, r24	; 0x16
    1a44:	9f 8b       	std	Y+23, r25	; 0x17
    1a46:	a8 8f       	std	Y+24, r26	; 0x18
    1a48:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1a4a:	6e 89       	ldd	r22, Y+22	; 0x16
    1a4c:	7f 89       	ldd	r23, Y+23	; 0x17
    1a4e:	88 8d       	ldd	r24, Y+24	; 0x18
    1a50:	99 8d       	ldd	r25, Y+25	; 0x19
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e8       	ldi	r20, 0x80	; 128
    1a58:	5f e3       	ldi	r21, 0x3F	; 63
    1a5a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a5e:	88 23       	and	r24, r24
    1a60:	2c f4       	brge	.+10     	; 0x1a6c <LCD_Cmd+0x44c>
		__ticks = 1;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9d 8b       	std	Y+21, r25	; 0x15
    1a68:	8c 8b       	std	Y+20, r24	; 0x14
    1a6a:	3f c0       	rjmp	.+126    	; 0x1aea <LCD_Cmd+0x4ca>
	else if (__tmp > 65535)
    1a6c:	6e 89       	ldd	r22, Y+22	; 0x16
    1a6e:	7f 89       	ldd	r23, Y+23	; 0x17
    1a70:	88 8d       	ldd	r24, Y+24	; 0x18
    1a72:	99 8d       	ldd	r25, Y+25	; 0x19
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	3f ef       	ldi	r19, 0xFF	; 255
    1a78:	4f e7       	ldi	r20, 0x7F	; 127
    1a7a:	57 e4       	ldi	r21, 0x47	; 71
    1a7c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a80:	18 16       	cp	r1, r24
    1a82:	4c f5       	brge	.+82     	; 0x1ad6 <LCD_Cmd+0x4b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a84:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a86:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a88:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a8a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e2       	ldi	r20, 0x20	; 32
    1a92:	51 e4       	ldi	r21, 0x41	; 65
    1a94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	bc 01       	movw	r22, r24
    1a9e:	cd 01       	movw	r24, r26
    1aa0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	9d 8b       	std	Y+21, r25	; 0x15
    1aaa:	8c 8b       	std	Y+20, r24	; 0x14
    1aac:	0f c0       	rjmp	.+30     	; 0x1acc <LCD_Cmd+0x4ac>
    1aae:	88 ec       	ldi	r24, 0xC8	; 200
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9b 8b       	std	Y+19, r25	; 0x13
    1ab4:	8a 8b       	std	Y+18, r24	; 0x12
    1ab6:	8a 89       	ldd	r24, Y+18	; 0x12
    1ab8:	9b 89       	ldd	r25, Y+19	; 0x13
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <LCD_Cmd+0x49a>
    1abe:	9b 8b       	std	Y+19, r25	; 0x13
    1ac0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac2:	8c 89       	ldd	r24, Y+20	; 0x14
    1ac4:	9d 89       	ldd	r25, Y+21	; 0x15
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	9d 8b       	std	Y+21, r25	; 0x15
    1aca:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1acc:	8c 89       	ldd	r24, Y+20	; 0x14
    1ace:	9d 89       	ldd	r25, Y+21	; 0x15
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	69 f7       	brne	.-38     	; 0x1aae <LCD_Cmd+0x48e>
    1ad4:	24 c0       	rjmp	.+72     	; 0x1b1e <LCD_Cmd+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad6:	6e 89       	ldd	r22, Y+22	; 0x16
    1ad8:	7f 89       	ldd	r23, Y+23	; 0x17
    1ada:	88 8d       	ldd	r24, Y+24	; 0x18
    1adc:	99 8d       	ldd	r25, Y+25	; 0x19
    1ade:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	9d 8b       	std	Y+21, r25	; 0x15
    1ae8:	8c 8b       	std	Y+20, r24	; 0x14
    1aea:	8c 89       	ldd	r24, Y+20	; 0x14
    1aec:	9d 89       	ldd	r25, Y+21	; 0x15
    1aee:	99 8b       	std	Y+17, r25	; 0x11
    1af0:	88 8b       	std	Y+16, r24	; 0x10
    1af2:	88 89       	ldd	r24, Y+16	; 0x10
    1af4:	99 89       	ldd	r25, Y+17	; 0x11
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_Cmd+0x4d6>
    1afa:	99 8b       	std	Y+17, r25	; 0x11
    1afc:	88 8b       	std	Y+16, r24	; 0x10
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <LCD_Cmd+0x4fe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b00:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b02:	78 a1       	ldd	r23, Y+32	; 0x20
    1b04:	89 a1       	ldd	r24, Y+33	; 0x21
    1b06:	9a a1       	ldd	r25, Y+34	; 0x22
    1b08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	8e 8f       	std	Y+30, r24	; 0x1e
    1b12:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b14:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b18:	8a 95       	dec	r24
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <LCD_Cmd+0x4f8>
    1b1c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    1b1e:	8b e0       	ldi	r24, 0x0B	; 11
    1b20:	61 e0       	ldi	r22, 0x01	; 1
    1b22:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_WriteChannel>
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	a0 e0       	ldi	r26, 0x00	; 0
    1b2c:	b0 e4       	ldi	r27, 0x40	; 64
    1b2e:	8b 87       	std	Y+11, r24	; 0x0b
    1b30:	9c 87       	std	Y+12, r25	; 0x0c
    1b32:	ad 87       	std	Y+13, r26	; 0x0d
    1b34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	4a ef       	ldi	r20, 0xFA	; 250
    1b44:	54 e4       	ldi	r21, 0x44	; 68
    1b46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	8f 83       	std	Y+7, r24	; 0x07
    1b50:	98 87       	std	Y+8, r25	; 0x08
    1b52:	a9 87       	std	Y+9, r26	; 0x09
    1b54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b56:	6f 81       	ldd	r22, Y+7	; 0x07
    1b58:	78 85       	ldd	r23, Y+8	; 0x08
    1b5a:	89 85       	ldd	r24, Y+9	; 0x09
    1b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e8       	ldi	r20, 0x80	; 128
    1b64:	5f e3       	ldi	r21, 0x3F	; 63
    1b66:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b6a:	88 23       	and	r24, r24
    1b6c:	2c f4       	brge	.+10     	; 0x1b78 <LCD_Cmd+0x558>
		__ticks = 1;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
    1b76:	3f c0       	rjmp	.+126    	; 0x1bf6 <LCD_Cmd+0x5d6>
	else if (__tmp > 65535)
    1b78:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7a:	78 85       	ldd	r23, Y+8	; 0x08
    1b7c:	89 85       	ldd	r24, Y+9	; 0x09
    1b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	3f ef       	ldi	r19, 0xFF	; 255
    1b84:	4f e7       	ldi	r20, 0x7F	; 127
    1b86:	57 e4       	ldi	r21, 0x47	; 71
    1b88:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b8c:	18 16       	cp	r1, r24
    1b8e:	4c f5       	brge	.+82     	; 0x1be2 <LCD_Cmd+0x5c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e2       	ldi	r20, 0x20	; 32
    1b9e:	51 e4       	ldi	r21, 0x41	; 65
    1ba0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	bc 01       	movw	r22, r24
    1baa:	cd 01       	movw	r24, r26
    1bac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	9e 83       	std	Y+6, r25	; 0x06
    1bb6:	8d 83       	std	Y+5, r24	; 0x05
    1bb8:	0f c0       	rjmp	.+30     	; 0x1bd8 <LCD_Cmd+0x5b8>
    1bba:	88 ec       	ldi	r24, 0xC8	; 200
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	9c 83       	std	Y+4, r25	; 0x04
    1bc0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <LCD_Cmd+0x5a6>
    1bca:	9c 83       	std	Y+4, r25	; 0x04
    1bcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	9e 83       	std	Y+6, r25	; 0x06
    1bd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bda:	9e 81       	ldd	r25, Y+6	; 0x06
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	69 f7       	brne	.-38     	; 0x1bba <LCD_Cmd+0x59a>
    1be0:	14 c0       	rjmp	.+40     	; 0x1c0a <LCD_Cmd+0x5ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be2:	6f 81       	ldd	r22, Y+7	; 0x07
    1be4:	78 85       	ldd	r23, Y+8	; 0x08
    1be6:	89 85       	ldd	r24, Y+9	; 0x09
    1be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	9e 83       	std	Y+6, r25	; 0x06
    1bf4:	8d 83       	std	Y+5, r24	; 0x05
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	9a 83       	std	Y+2, r25	; 0x02
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	9a 81       	ldd	r25, Y+2	; 0x02
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <LCD_Cmd+0x5e2>
    1c06:	9a 83       	std	Y+2, r25	; 0x02
    1c08:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1c0a:	c2 5b       	subi	r28, 0xB2	; 178
    1c0c:	df 4f       	sbci	r29, 0xFF	; 255
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	08 95       	ret

00001c22 <LCD_Char>:
void LCD_Char(int8 data){
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	ce 54       	subi	r28, 0x4E	; 78
    1c30:	d0 40       	sbci	r29, 0x00	; 0
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	e2 5b       	subi	r30, 0xB2	; 178
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	80 83       	st	Z, r24
	Uint8 PortValue = 0;
    1c44:	fe 01       	movw	r30, r28
    1c46:	e3 5b       	subi	r30, 0xB3	; 179
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	10 82       	st	Z, r1
	DIO_WriteChannel(LCD_RS,STD_High);
    1c4c:	89 e0       	ldi	r24, 0x09	; 9
    1c4e:	61 e0       	ldi	r22, 0x01	; 1
    1c50:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_WriteChannel>
	PortValue = DIO_ReadPort(LCD_DataPort);
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	0e 94 5f 08 	call	0x10be	; 0x10be <DIO_ReadPort>
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	e3 5b       	subi	r30, 0xB3	; 179
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	80 83       	st	Z, r24
	PortValue = (PortValue & 0x0F) | (data & 0xF0);
    1c62:	fe 01       	movw	r30, r28
    1c64:	e3 5b       	subi	r30, 0xB3	; 179
    1c66:	ff 4f       	sbci	r31, 0xFF	; 255
    1c68:	80 81       	ld	r24, Z
    1c6a:	98 2f       	mov	r25, r24
    1c6c:	9f 70       	andi	r25, 0x0F	; 15
    1c6e:	fe 01       	movw	r30, r28
    1c70:	e2 5b       	subi	r30, 0xB2	; 178
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	80 81       	ld	r24, Z
    1c76:	80 7f       	andi	r24, 0xF0	; 240
    1c78:	89 2b       	or	r24, r25
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e3 5b       	subi	r30, 0xB3	; 179
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	80 83       	st	Z, r24
	DIO_WritePort(LCD_DataPort,PortValue);
    1c82:	fe 01       	movw	r30, r28
    1c84:	e3 5b       	subi	r30, 0xB3	; 179
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	60 81       	ld	r22, Z
    1c8c:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    1c90:	8b e0       	ldi	r24, 0x0B	; 11
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_WriteChannel>
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e7 5b       	subi	r30, 0xB7	; 183
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	a8 ec       	ldi	r26, 0xC8	; 200
    1ca4:	b2 e4       	ldi	r27, 0x42	; 66
    1ca6:	80 83       	st	Z, r24
    1ca8:	91 83       	std	Z+1, r25	; 0x01
    1caa:	a2 83       	std	Z+2, r26	; 0x02
    1cac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cae:	8e 01       	movw	r16, r28
    1cb0:	0b 5b       	subi	r16, 0xBB	; 187
    1cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	e7 5b       	subi	r30, 0xB7	; 183
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	60 81       	ld	r22, Z
    1cbc:	71 81       	ldd	r23, Z+1	; 0x01
    1cbe:	82 81       	ldd	r24, Z+2	; 0x02
    1cc0:	93 81       	ldd	r25, Z+3	; 0x03
    1cc2:	2b ea       	ldi	r18, 0xAB	; 171
    1cc4:	3a ea       	ldi	r19, 0xAA	; 170
    1cc6:	4a e2       	ldi	r20, 0x2A	; 42
    1cc8:	50 e4       	ldi	r21, 0x40	; 64
    1cca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	80 83       	st	Z, r24
    1cd6:	91 83       	std	Z+1, r25	; 0x01
    1cd8:	a2 83       	std	Z+2, r26	; 0x02
    1cda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cdc:	fe 01       	movw	r30, r28
    1cde:	eb 5b       	subi	r30, 0xBB	; 187
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	60 81       	ld	r22, Z
    1ce4:	71 81       	ldd	r23, Z+1	; 0x01
    1ce6:	82 81       	ldd	r24, Z+2	; 0x02
    1ce8:	93 81       	ldd	r25, Z+3	; 0x03
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e8       	ldi	r20, 0x80	; 128
    1cf0:	5f e3       	ldi	r21, 0x3F	; 63
    1cf2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cf6:	88 23       	and	r24, r24
    1cf8:	34 f4       	brge	.+12     	; 0x1d06 <LCD_Char+0xe4>
		__ticks = 1;
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	ec 5b       	subi	r30, 0xBC	; 188
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	80 83       	st	Z, r24
    1d04:	a7 c0       	rjmp	.+334    	; 0x1e54 <LCD_Char+0x232>
	else if (__tmp > 255)
    1d06:	fe 01       	movw	r30, r28
    1d08:	eb 5b       	subi	r30, 0xBB	; 187
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	60 81       	ld	r22, Z
    1d0e:	71 81       	ldd	r23, Z+1	; 0x01
    1d10:	82 81       	ldd	r24, Z+2	; 0x02
    1d12:	93 81       	ldd	r25, Z+3	; 0x03
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	4f e7       	ldi	r20, 0x7F	; 127
    1d1a:	53 e4       	ldi	r21, 0x43	; 67
    1d1c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d20:	18 16       	cp	r1, r24
    1d22:	0c f0       	brlt	.+2      	; 0x1d26 <LCD_Char+0x104>
    1d24:	87 c0       	rjmp	.+270    	; 0x1e34 <LCD_Char+0x212>
	{
		_delay_ms(__us / 1000.0);
    1d26:	fe 01       	movw	r30, r28
    1d28:	e7 5b       	subi	r30, 0xB7	; 183
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	60 81       	ld	r22, Z
    1d2e:	71 81       	ldd	r23, Z+1	; 0x01
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	4a e7       	ldi	r20, 0x7A	; 122
    1d3a:	54 e4       	ldi	r21, 0x44	; 68
    1d3c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	fe 01       	movw	r30, r28
    1d46:	e0 5c       	subi	r30, 0xC0	; 192
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	80 83       	st	Z, r24
    1d4c:	91 83       	std	Z+1, r25	; 0x01
    1d4e:	a2 83       	std	Z+2, r26	; 0x02
    1d50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d52:	fe 01       	movw	r30, r28
    1d54:	e0 5c       	subi	r30, 0xC0	; 192
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	60 81       	ld	r22, Z
    1d5a:	71 81       	ldd	r23, Z+1	; 0x01
    1d5c:	82 81       	ldd	r24, Z+2	; 0x02
    1d5e:	93 81       	ldd	r25, Z+3	; 0x03
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	4a ef       	ldi	r20, 0xFA	; 250
    1d66:	54 e4       	ldi	r21, 0x44	; 68
    1d68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	8c af       	std	Y+60, r24	; 0x3c
    1d72:	9d af       	std	Y+61, r25	; 0x3d
    1d74:	ae af       	std	Y+62, r26	; 0x3e
    1d76:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    1d78:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d7a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d7c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e8       	ldi	r20, 0x80	; 128
    1d86:	5f e3       	ldi	r21, 0x3F	; 63
    1d88:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d8c:	88 23       	and	r24, r24
    1d8e:	2c f4       	brge	.+10     	; 0x1d9a <LCD_Char+0x178>
		__ticks = 1;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	9b af       	std	Y+59, r25	; 0x3b
    1d96:	8a af       	std	Y+58, r24	; 0x3a
    1d98:	42 c0       	rjmp	.+132    	; 0x1e1e <LCD_Char+0x1fc>
	else if (__tmp > 65535)
    1d9a:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d9c:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d9e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1da0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	3f ef       	ldi	r19, 0xFF	; 255
    1da6:	4f e7       	ldi	r20, 0x7F	; 127
    1da8:	57 e4       	ldi	r21, 0x47	; 71
    1daa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dae:	18 16       	cp	r1, r24
    1db0:	64 f5       	brge	.+88     	; 0x1e0a <LCD_Char+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db2:	fe 01       	movw	r30, r28
    1db4:	e0 5c       	subi	r30, 0xC0	; 192
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e2       	ldi	r20, 0x20	; 32
    1dc6:	51 e4       	ldi	r21, 0x41	; 65
    1dc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	bc 01       	movw	r22, r24
    1dd2:	cd 01       	movw	r24, r26
    1dd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	9b af       	std	Y+59, r25	; 0x3b
    1dde:	8a af       	std	Y+58, r24	; 0x3a
    1de0:	0f c0       	rjmp	.+30     	; 0x1e00 <LCD_Char+0x1de>
    1de2:	88 ec       	ldi	r24, 0xC8	; 200
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	99 af       	std	Y+57, r25	; 0x39
    1de8:	88 af       	std	Y+56, r24	; 0x38
    1dea:	88 ad       	ldd	r24, Y+56	; 0x38
    1dec:	99 ad       	ldd	r25, Y+57	; 0x39
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <LCD_Char+0x1cc>
    1df2:	99 af       	std	Y+57, r25	; 0x39
    1df4:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df6:	8a ad       	ldd	r24, Y+58	; 0x3a
    1df8:	9b ad       	ldd	r25, Y+59	; 0x3b
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	9b af       	std	Y+59, r25	; 0x3b
    1dfe:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e00:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e02:	9b ad       	ldd	r25, Y+59	; 0x3b
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	69 f7       	brne	.-38     	; 0x1de2 <LCD_Char+0x1c0>
    1e08:	2e c0       	rjmp	.+92     	; 0x1e66 <LCD_Char+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0a:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e0c:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e0e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e10:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	9b af       	std	Y+59, r25	; 0x3b
    1e1c:	8a af       	std	Y+58, r24	; 0x3a
    1e1e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e20:	9b ad       	ldd	r25, Y+59	; 0x3b
    1e22:	9f ab       	std	Y+55, r25	; 0x37
    1e24:	8e ab       	std	Y+54, r24	; 0x36
    1e26:	8e a9       	ldd	r24, Y+54	; 0x36
    1e28:	9f a9       	ldd	r25, Y+55	; 0x37
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <LCD_Char+0x208>
    1e2e:	9f ab       	std	Y+55, r25	; 0x37
    1e30:	8e ab       	std	Y+54, r24	; 0x36
    1e32:	19 c0       	rjmp	.+50     	; 0x1e66 <LCD_Char+0x244>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e34:	8e 01       	movw	r16, r28
    1e36:	0c 5b       	subi	r16, 0xBC	; 188
    1e38:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	eb 5b       	subi	r30, 0xBB	; 187
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	60 81       	ld	r22, Z
    1e42:	71 81       	ldd	r23, Z+1	; 0x01
    1e44:	82 81       	ldd	r24, Z+2	; 0x02
    1e46:	93 81       	ldd	r25, Z+3	; 0x03
    1e48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	f8 01       	movw	r30, r16
    1e52:	80 83       	st	Z, r24
    1e54:	fe 01       	movw	r30, r28
    1e56:	ec 5b       	subi	r30, 0xBC	; 188
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	80 81       	ld	r24, Z
    1e5c:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e5e:	8d a9       	ldd	r24, Y+53	; 0x35
    1e60:	8a 95       	dec	r24
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <LCD_Char+0x23e>
    1e64:	8d ab       	std	Y+53, r24	; 0x35
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    1e66:	8b e0       	ldi	r24, 0x0B	; 11
    1e68:	61 e0       	ldi	r22, 0x01	; 1
    1e6a:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_WriteChannel>
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	a0 ea       	ldi	r26, 0xA0	; 160
    1e74:	b0 e4       	ldi	r27, 0x40	; 64
    1e76:	89 ab       	std	Y+49, r24	; 0x31
    1e78:	9a ab       	std	Y+50, r25	; 0x32
    1e7a:	ab ab       	std	Y+51, r26	; 0x33
    1e7c:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e80:	7a a9       	ldd	r23, Y+50	; 0x32
    1e82:	8b a9       	ldd	r24, Y+51	; 0x33
    1e84:	9c a9       	ldd	r25, Y+52	; 0x34
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	4a ef       	ldi	r20, 0xFA	; 250
    1e8c:	54 e4       	ldi	r21, 0x44	; 68
    1e8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	8d a7       	std	Y+45, r24	; 0x2d
    1e98:	9e a7       	std	Y+46, r25	; 0x2e
    1e9a:	af a7       	std	Y+47, r26	; 0x2f
    1e9c:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1e9e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ea0:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ea2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e8       	ldi	r20, 0x80	; 128
    1eac:	5f e3       	ldi	r21, 0x3F	; 63
    1eae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1eb2:	88 23       	and	r24, r24
    1eb4:	2c f4       	brge	.+10     	; 0x1ec0 <LCD_Char+0x29e>
		__ticks = 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9c a7       	std	Y+44, r25	; 0x2c
    1ebc:	8b a7       	std	Y+43, r24	; 0x2b
    1ebe:	3f c0       	rjmp	.+126    	; 0x1f3e <LCD_Char+0x31c>
	else if (__tmp > 65535)
    1ec0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ec2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ec4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ec6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	3f ef       	ldi	r19, 0xFF	; 255
    1ecc:	4f e7       	ldi	r20, 0x7F	; 127
    1ece:	57 e4       	ldi	r21, 0x47	; 71
    1ed0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ed4:	18 16       	cp	r1, r24
    1ed6:	4c f5       	brge	.+82     	; 0x1f2a <LCD_Char+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eda:	7a a9       	ldd	r23, Y+50	; 0x32
    1edc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ede:	9c a9       	ldd	r25, Y+52	; 0x34
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e2       	ldi	r20, 0x20	; 32
    1ee6:	51 e4       	ldi	r21, 0x41	; 65
    1ee8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	9c a7       	std	Y+44, r25	; 0x2c
    1efe:	8b a7       	std	Y+43, r24	; 0x2b
    1f00:	0f c0       	rjmp	.+30     	; 0x1f20 <LCD_Char+0x2fe>
    1f02:	88 ec       	ldi	r24, 0xC8	; 200
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	9a a7       	std	Y+42, r25	; 0x2a
    1f08:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <LCD_Char+0x2ec>
    1f12:	9a a7       	std	Y+42, r25	; 0x2a
    1f14:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f16:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f18:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	9c a7       	std	Y+44, r25	; 0x2c
    1f1e:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f20:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f22:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	69 f7       	brne	.-38     	; 0x1f02 <LCD_Char+0x2e0>
    1f28:	14 c0       	rjmp	.+40     	; 0x1f52 <LCD_Char+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2a:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f2c:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f30:	98 a9       	ldd	r25, Y+48	; 0x30
    1f32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9c a7       	std	Y+44, r25	; 0x2c
    1f3c:	8b a7       	std	Y+43, r24	; 0x2b
    1f3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f40:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f42:	98 a7       	std	Y+40, r25	; 0x28
    1f44:	8f a3       	std	Y+39, r24	; 0x27
    1f46:	8f a1       	ldd	r24, Y+39	; 0x27
    1f48:	98 a5       	ldd	r25, Y+40	; 0x28
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <LCD_Char+0x328>
    1f4e:	98 a7       	std	Y+40, r25	; 0x28
    1f50:	8f a3       	std	Y+39, r24	; 0x27
	
	_delay_ms(5);
	
	PortValue = DIO_ReadPort(LCD_DataPort);
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	0e 94 5f 08 	call	0x10be	; 0x10be <DIO_ReadPort>
    1f58:	fe 01       	movw	r30, r28
    1f5a:	e3 5b       	subi	r30, 0xB3	; 179
    1f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5e:	80 83       	st	Z, r24
	PortValue = (PortValue & 0x0F) | (data << 4);
    1f60:	fe 01       	movw	r30, r28
    1f62:	e3 5b       	subi	r30, 0xB3	; 179
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	80 81       	ld	r24, Z
    1f68:	28 2f       	mov	r18, r24
    1f6a:	2f 70       	andi	r18, 0x0F	; 15
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e2 5b       	subi	r30, 0xB2	; 178
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	80 81       	ld	r24, Z
    1f74:	88 2f       	mov	r24, r24
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	82 95       	swap	r24
    1f7a:	92 95       	swap	r25
    1f7c:	90 7f       	andi	r25, 0xF0	; 240
    1f7e:	98 27       	eor	r25, r24
    1f80:	80 7f       	andi	r24, 0xF0	; 240
    1f82:	98 27       	eor	r25, r24
    1f84:	82 2b       	or	r24, r18
    1f86:	fe 01       	movw	r30, r28
    1f88:	e3 5b       	subi	r30, 0xB3	; 179
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 83       	st	Z, r24
	DIO_WritePort(LCD_DataPort,PortValue);
    1f8e:	fe 01       	movw	r30, r28
    1f90:	e3 5b       	subi	r30, 0xB3	; 179
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	60 81       	ld	r22, Z
    1f98:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    1f9c:	8b e0       	ldi	r24, 0x0B	; 11
    1f9e:	60 e0       	ldi	r22, 0x00	; 0
    1fa0:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_WriteChannel>
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a8 ec       	ldi	r26, 0xC8	; 200
    1faa:	b2 e4       	ldi	r27, 0x42	; 66
    1fac:	8b a3       	std	Y+35, r24	; 0x23
    1fae:	9c a3       	std	Y+36, r25	; 0x24
    1fb0:	ad a3       	std	Y+37, r26	; 0x25
    1fb2:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fb4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fb6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fba:	9e a1       	ldd	r25, Y+38	; 0x26
    1fbc:	2b ea       	ldi	r18, 0xAB	; 171
    1fbe:	3a ea       	ldi	r19, 0xAA	; 170
    1fc0:	4a e2       	ldi	r20, 0x2A	; 42
    1fc2:	50 e4       	ldi	r21, 0x40	; 64
    1fc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	8f 8f       	std	Y+31, r24	; 0x1f
    1fce:	98 a3       	std	Y+32, r25	; 0x20
    1fd0:	a9 a3       	std	Y+33, r26	; 0x21
    1fd2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1fd4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1fd6:	78 a1       	ldd	r23, Y+32	; 0x20
    1fd8:	89 a1       	ldd	r24, Y+33	; 0x21
    1fda:	9a a1       	ldd	r25, Y+34	; 0x22
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e8       	ldi	r20, 0x80	; 128
    1fe2:	5f e3       	ldi	r21, 0x3F	; 63
    1fe4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fe8:	88 23       	and	r24, r24
    1fea:	1c f4       	brge	.+6      	; 0x1ff2 <LCD_Char+0x3d0>
		__ticks = 1;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	8e 8f       	std	Y+30, r24	; 0x1e
    1ff0:	91 c0       	rjmp	.+290    	; 0x2114 <LCD_Char+0x4f2>
	else if (__tmp > 255)
    1ff2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ff4:	78 a1       	ldd	r23, Y+32	; 0x20
    1ff6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff8:	9a a1       	ldd	r25, Y+34	; 0x22
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	4f e7       	ldi	r20, 0x7F	; 127
    2000:	53 e4       	ldi	r21, 0x43	; 67
    2002:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2006:	18 16       	cp	r1, r24
    2008:	0c f0       	brlt	.+2      	; 0x200c <LCD_Char+0x3ea>
    200a:	7b c0       	rjmp	.+246    	; 0x2102 <LCD_Char+0x4e0>
	{
		_delay_ms(__us / 1000.0);
    200c:	6b a1       	ldd	r22, Y+35	; 0x23
    200e:	7c a1       	ldd	r23, Y+36	; 0x24
    2010:	8d a1       	ldd	r24, Y+37	; 0x25
    2012:	9e a1       	ldd	r25, Y+38	; 0x26
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	4a e7       	ldi	r20, 0x7A	; 122
    201a:	54 e4       	ldi	r21, 0x44	; 68
    201c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	8a 8f       	std	Y+26, r24	; 0x1a
    2026:	9b 8f       	std	Y+27, r25	; 0x1b
    2028:	ac 8f       	std	Y+28, r26	; 0x1c
    202a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    202e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2030:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2032:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	4a ef       	ldi	r20, 0xFA	; 250
    203a:	54 e4       	ldi	r21, 0x44	; 68
    203c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	8e 8b       	std	Y+22, r24	; 0x16
    2046:	9f 8b       	std	Y+23, r25	; 0x17
    2048:	a8 8f       	std	Y+24, r26	; 0x18
    204a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    204c:	6e 89       	ldd	r22, Y+22	; 0x16
    204e:	7f 89       	ldd	r23, Y+23	; 0x17
    2050:	88 8d       	ldd	r24, Y+24	; 0x18
    2052:	99 8d       	ldd	r25, Y+25	; 0x19
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	40 e8       	ldi	r20, 0x80	; 128
    205a:	5f e3       	ldi	r21, 0x3F	; 63
    205c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2060:	88 23       	and	r24, r24
    2062:	2c f4       	brge	.+10     	; 0x206e <LCD_Char+0x44c>
		__ticks = 1;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	9d 8b       	std	Y+21, r25	; 0x15
    206a:	8c 8b       	std	Y+20, r24	; 0x14
    206c:	3f c0       	rjmp	.+126    	; 0x20ec <LCD_Char+0x4ca>
	else if (__tmp > 65535)
    206e:	6e 89       	ldd	r22, Y+22	; 0x16
    2070:	7f 89       	ldd	r23, Y+23	; 0x17
    2072:	88 8d       	ldd	r24, Y+24	; 0x18
    2074:	99 8d       	ldd	r25, Y+25	; 0x19
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	3f ef       	ldi	r19, 0xFF	; 255
    207a:	4f e7       	ldi	r20, 0x7F	; 127
    207c:	57 e4       	ldi	r21, 0x47	; 71
    207e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2082:	18 16       	cp	r1, r24
    2084:	4c f5       	brge	.+82     	; 0x20d8 <LCD_Char+0x4b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2086:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2088:	7b 8d       	ldd	r23, Y+27	; 0x1b
    208a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    208c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e2       	ldi	r20, 0x20	; 32
    2094:	51 e4       	ldi	r21, 0x41	; 65
    2096:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	bc 01       	movw	r22, r24
    20a0:	cd 01       	movw	r24, r26
    20a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	9d 8b       	std	Y+21, r25	; 0x15
    20ac:	8c 8b       	std	Y+20, r24	; 0x14
    20ae:	0f c0       	rjmp	.+30     	; 0x20ce <LCD_Char+0x4ac>
    20b0:	88 ec       	ldi	r24, 0xC8	; 200
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	9b 8b       	std	Y+19, r25	; 0x13
    20b6:	8a 8b       	std	Y+18, r24	; 0x12
    20b8:	8a 89       	ldd	r24, Y+18	; 0x12
    20ba:	9b 89       	ldd	r25, Y+19	; 0x13
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	f1 f7       	brne	.-4      	; 0x20bc <LCD_Char+0x49a>
    20c0:	9b 8b       	std	Y+19, r25	; 0x13
    20c2:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c4:	8c 89       	ldd	r24, Y+20	; 0x14
    20c6:	9d 89       	ldd	r25, Y+21	; 0x15
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	9d 8b       	std	Y+21, r25	; 0x15
    20cc:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ce:	8c 89       	ldd	r24, Y+20	; 0x14
    20d0:	9d 89       	ldd	r25, Y+21	; 0x15
    20d2:	00 97       	sbiw	r24, 0x00	; 0
    20d4:	69 f7       	brne	.-38     	; 0x20b0 <LCD_Char+0x48e>
    20d6:	24 c0       	rjmp	.+72     	; 0x2120 <LCD_Char+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d8:	6e 89       	ldd	r22, Y+22	; 0x16
    20da:	7f 89       	ldd	r23, Y+23	; 0x17
    20dc:	88 8d       	ldd	r24, Y+24	; 0x18
    20de:	99 8d       	ldd	r25, Y+25	; 0x19
    20e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	9d 8b       	std	Y+21, r25	; 0x15
    20ea:	8c 8b       	std	Y+20, r24	; 0x14
    20ec:	8c 89       	ldd	r24, Y+20	; 0x14
    20ee:	9d 89       	ldd	r25, Y+21	; 0x15
    20f0:	99 8b       	std	Y+17, r25	; 0x11
    20f2:	88 8b       	std	Y+16, r24	; 0x10
    20f4:	88 89       	ldd	r24, Y+16	; 0x10
    20f6:	99 89       	ldd	r25, Y+17	; 0x11
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <LCD_Char+0x4d6>
    20fc:	99 8b       	std	Y+17, r25	; 0x11
    20fe:	88 8b       	std	Y+16, r24	; 0x10
    2100:	0f c0       	rjmp	.+30     	; 0x2120 <LCD_Char+0x4fe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2102:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2104:	78 a1       	ldd	r23, Y+32	; 0x20
    2106:	89 a1       	ldd	r24, Y+33	; 0x21
    2108:	9a a1       	ldd	r25, Y+34	; 0x22
    210a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	8e 8f       	std	Y+30, r24	; 0x1e
    2114:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2116:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2118:	8f 85       	ldd	r24, Y+15	; 0x0f
    211a:	8a 95       	dec	r24
    211c:	f1 f7       	brne	.-4      	; 0x211a <LCD_Char+0x4f8>
    211e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    2120:	8b e0       	ldi	r24, 0x0B	; 11
    2122:	61 e0       	ldi	r22, 0x01	; 1
    2124:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_WriteChannel>
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	a0 e0       	ldi	r26, 0x00	; 0
    212e:	b0 e4       	ldi	r27, 0x40	; 64
    2130:	8b 87       	std	Y+11, r24	; 0x0b
    2132:	9c 87       	std	Y+12, r25	; 0x0c
    2134:	ad 87       	std	Y+13, r26	; 0x0d
    2136:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2138:	6b 85       	ldd	r22, Y+11	; 0x0b
    213a:	7c 85       	ldd	r23, Y+12	; 0x0c
    213c:	8d 85       	ldd	r24, Y+13	; 0x0d
    213e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	4a ef       	ldi	r20, 0xFA	; 250
    2146:	54 e4       	ldi	r21, 0x44	; 68
    2148:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	8f 83       	std	Y+7, r24	; 0x07
    2152:	98 87       	std	Y+8, r25	; 0x08
    2154:	a9 87       	std	Y+9, r26	; 0x09
    2156:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2158:	6f 81       	ldd	r22, Y+7	; 0x07
    215a:	78 85       	ldd	r23, Y+8	; 0x08
    215c:	89 85       	ldd	r24, Y+9	; 0x09
    215e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e8       	ldi	r20, 0x80	; 128
    2166:	5f e3       	ldi	r21, 0x3F	; 63
    2168:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    216c:	88 23       	and	r24, r24
    216e:	2c f4       	brge	.+10     	; 0x217a <LCD_Char+0x558>
		__ticks = 1;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9e 83       	std	Y+6, r25	; 0x06
    2176:	8d 83       	std	Y+5, r24	; 0x05
    2178:	3f c0       	rjmp	.+126    	; 0x21f8 <LCD_Char+0x5d6>
	else if (__tmp > 65535)
    217a:	6f 81       	ldd	r22, Y+7	; 0x07
    217c:	78 85       	ldd	r23, Y+8	; 0x08
    217e:	89 85       	ldd	r24, Y+9	; 0x09
    2180:	9a 85       	ldd	r25, Y+10	; 0x0a
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	3f ef       	ldi	r19, 0xFF	; 255
    2186:	4f e7       	ldi	r20, 0x7F	; 127
    2188:	57 e4       	ldi	r21, 0x47	; 71
    218a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    218e:	18 16       	cp	r1, r24
    2190:	4c f5       	brge	.+82     	; 0x21e4 <LCD_Char+0x5c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2192:	6b 85       	ldd	r22, Y+11	; 0x0b
    2194:	7c 85       	ldd	r23, Y+12	; 0x0c
    2196:	8d 85       	ldd	r24, Y+13	; 0x0d
    2198:	9e 85       	ldd	r25, Y+14	; 0x0e
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e2       	ldi	r20, 0x20	; 32
    21a0:	51 e4       	ldi	r21, 0x41	; 65
    21a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9e 83       	std	Y+6, r25	; 0x06
    21b8:	8d 83       	std	Y+5, r24	; 0x05
    21ba:	0f c0       	rjmp	.+30     	; 0x21da <LCD_Char+0x5b8>
    21bc:	88 ec       	ldi	r24, 0xC8	; 200
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9c 83       	std	Y+4, r25	; 0x04
    21c2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	9c 81       	ldd	r25, Y+4	; 0x04
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <LCD_Char+0x5a6>
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d0:	8d 81       	ldd	r24, Y+5	; 0x05
    21d2:	9e 81       	ldd	r25, Y+6	; 0x06
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	9e 83       	std	Y+6, r25	; 0x06
    21d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21da:	8d 81       	ldd	r24, Y+5	; 0x05
    21dc:	9e 81       	ldd	r25, Y+6	; 0x06
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	69 f7       	brne	.-38     	; 0x21bc <LCD_Char+0x59a>
    21e2:	14 c0       	rjmp	.+40     	; 0x220c <LCD_Char+0x5ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e4:	6f 81       	ldd	r22, Y+7	; 0x07
    21e6:	78 85       	ldd	r23, Y+8	; 0x08
    21e8:	89 85       	ldd	r24, Y+9	; 0x09
    21ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	9e 83       	std	Y+6, r25	; 0x06
    21f6:	8d 83       	std	Y+5, r24	; 0x05
    21f8:	8d 81       	ldd	r24, Y+5	; 0x05
    21fa:	9e 81       	ldd	r25, Y+6	; 0x06
    21fc:	9a 83       	std	Y+2, r25	; 0x02
    21fe:	89 83       	std	Y+1, r24	; 0x01
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	9a 81       	ldd	r25, Y+2	; 0x02
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <LCD_Char+0x5e2>
    2208:	9a 83       	std	Y+2, r25	; 0x02
    220a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);	
}
    220c:	c2 5b       	subi	r28, 0xB2	; 178
    220e:	df 4f       	sbci	r29, 0xFF	; 255
    2210:	0f b6       	in	r0, 0x3f	; 63
    2212:	f8 94       	cli
    2214:	de bf       	out	0x3e, r29	; 62
    2216:	0f be       	out	0x3f, r0	; 63
    2218:	cd bf       	out	0x3d, r28	; 61
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	1f 91       	pop	r17
    2220:	0f 91       	pop	r16
    2222:	08 95       	ret

00002224 <LCD_String>:

void LCD_String(int8 * string){
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	00 d0       	rcall	.+0      	; 0x222a <LCD_String+0x6>
    222a:	0f 92       	push	r0
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	9b 83       	std	Y+3, r25	; 0x03
    2232:	8a 83       	std	Y+2, r24	; 0x02
	Uint8 i = 0;
    2234:	19 82       	std	Y+1, r1	; 0x01
    2236:	0e c0       	rjmp	.+28     	; 0x2254 <LCD_String+0x30>
	while(string[i] != '\0'){
		LCD_Char(string[i]);
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	9b 81       	ldd	r25, Y+3	; 0x03
    2242:	fc 01       	movw	r30, r24
    2244:	e2 0f       	add	r30, r18
    2246:	f3 1f       	adc	r31, r19
    2248:	80 81       	ld	r24, Z
    224a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_Char>
		i++;
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	8f 5f       	subi	r24, 0xFF	; 255
    2252:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);	
}

void LCD_String(int8 * string){
	Uint8 i = 0;
	while(string[i] != '\0'){
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	28 2f       	mov	r18, r24
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	9b 81       	ldd	r25, Y+3	; 0x03
    225e:	fc 01       	movw	r30, r24
    2260:	e2 0f       	add	r30, r18
    2262:	f3 1f       	adc	r31, r19
    2264:	80 81       	ld	r24, Z
    2266:	88 23       	and	r24, r24
    2268:	39 f7       	brne	.-50     	; 0x2238 <LCD_String+0x14>
		LCD_Char(string[i]);
		i++;
	}
}
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <LCD_SetPos>:

void LCD_SetPos(Uint8 line,Uint8 pos){
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	00 d0       	rcall	.+0      	; 0x227c <LCD_SetPos+0x6>
    227c:	00 d0       	rcall	.+0      	; 0x227e <LCD_SetPos+0x8>
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	6a 83       	std	Y+2, r22	; 0x02
	switch(line){
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	28 2f       	mov	r18, r24
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	3c 83       	std	Y+4, r19	; 0x04
    228e:	2b 83       	std	Y+3, r18	; 0x03
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	9c 81       	ldd	r25, Y+4	; 0x04
    2294:	81 30       	cpi	r24, 0x01	; 1
    2296:	91 05       	cpc	r25, r1
    2298:	31 f0       	breq	.+12     	; 0x22a6 <LCD_SetPos+0x30>
    229a:	2b 81       	ldd	r18, Y+3	; 0x03
    229c:	3c 81       	ldd	r19, Y+4	; 0x04
    229e:	22 30       	cpi	r18, 0x02	; 2
    22a0:	31 05       	cpc	r19, r1
    22a2:	39 f0       	breq	.+14     	; 0x22b2 <LCD_SetPos+0x3c>
    22a4:	0b c0       	rjmp	.+22     	; 0x22bc <LCD_SetPos+0x46>
		case 1:
		LCD_Cmd(0x80 | (pos & 0x0F));
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	8f 70       	andi	r24, 0x0F	; 15
    22aa:	80 68       	ori	r24, 0x80	; 128
    22ac:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Cmd>
    22b0:	05 c0       	rjmp	.+10     	; 0x22bc <LCD_SetPos+0x46>
		break;
		case 2:
		LCD_Cmd(0xC0 | (pos & 0x0F));
    22b2:	8a 81       	ldd	r24, Y+2	; 0x02
    22b4:	8f 70       	andi	r24, 0x0F	; 15
    22b6:	80 6c       	ori	r24, 0xC0	; 192
    22b8:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Cmd>
		break;
	}
}
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <LCD_Custome_Char>:

void LCD_Custome_Char(Uint8 loc,int8 * msg){
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <LCD_Custome_Char+0x6>
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <LCD_Custome_Char+0x8>
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	8a 83       	std	Y+2, r24	; 0x02
    22d8:	7c 83       	std	Y+4, r23	; 0x04
    22da:	6b 83       	std	Y+3, r22	; 0x03
	Uint8 i = 0;
    22dc:	19 82       	std	Y+1, r1	; 0x01
	if(loc < 8){
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	88 30       	cpi	r24, 0x08	; 8
    22e2:	f8 f4       	brcc	.+62     	; 0x2322 <LCD_Custome_Char+0x58>
		LCD_Cmd(0x40 + (loc*8));
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
    22e6:	88 2f       	mov	r24, r24
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	08 96       	adiw	r24, 0x08	; 8
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	88 0f       	add	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Cmd>
		for(i=0;i<8;i++){
    22fc:	19 82       	std	Y+1, r1	; 0x01
    22fe:	0e c0       	rjmp	.+28     	; 0x231c <LCD_Custome_Char+0x52>
			LCD_Char(msg[i]);
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	fc 01       	movw	r30, r24
    230c:	e2 0f       	add	r30, r18
    230e:	f3 1f       	adc	r31, r19
    2310:	80 81       	ld	r24, Z
    2312:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_Char>

void LCD_Custome_Char(Uint8 loc,int8 * msg){
	Uint8 i = 0;
	if(loc < 8){
		LCD_Cmd(0x40 + (loc*8));
		for(i=0;i<8;i++){
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	8f 5f       	subi	r24, 0xFF	; 255
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	88 30       	cpi	r24, 0x08	; 8
    2320:	78 f3       	brcs	.-34     	; 0x2300 <LCD_Custome_Char+0x36>
			LCD_Char(msg[i]);
		}
	}
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	cf 91       	pop	r28
    232c:	df 91       	pop	r29
    232e:	08 95       	ret

00002330 <UART_INIT>:
 *      Author: mahmoud
 */

#include "USART.h"

void UART_INIT() {
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= (1 << TXEN) | (1 << RXEN); //enable reciever and transmitter
    2338:	aa e2       	ldi	r26, 0x2A	; 42
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	ea e2       	ldi	r30, 0x2A	; 42
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	88 61       	ori	r24, 0x18	; 24
    2344:	8c 93       	st	X, r24
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0); //8 BITS
    2346:	a0 e4       	ldi	r26, 0x40	; 64
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e0 e4       	ldi	r30, 0x40	; 64
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	86 68       	ori	r24, 0x86	; 134
    2352:	8c 93       	st	X, r24
	UBRRL = MyUBRR;
    2354:	e9 e2       	ldi	r30, 0x29	; 41
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	83 e3       	ldi	r24, 0x33	; 51
    235a:	80 83       	st	Z, r24
	UBRRH |= MyUBRR >> 8;
    235c:	a0 e4       	ldi	r26, 0x40	; 64
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e0 e4       	ldi	r30, 0x40	; 64
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	8c 93       	st	X, r24
}
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <UART_TransmitChar>:
void UART_TransmitChar(s8 data) {
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	0f 92       	push	r0
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << UDRE)))
    237a:	eb e2       	ldi	r30, 0x2B	; 43
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	88 2f       	mov	r24, r24
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	80 72       	andi	r24, 0x20	; 32
    2386:	90 70       	andi	r25, 0x00	; 0
    2388:	00 97       	sbiw	r24, 0x00	; 0
    238a:	b9 f3       	breq	.-18     	; 0x237a <UART_TransmitChar+0xc>
		;
	UDR = data;
    238c:	ec e2       	ldi	r30, 0x2C	; 44
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	80 83       	st	Z, r24
}
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <UART_Recieve>:
s8 UART_Recieve() {
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSRA & (1 << RXC)))
    23a4:	eb e2       	ldi	r30, 0x2B	; 43
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	88 23       	and	r24, r24
    23ac:	dc f7       	brge	.-10     	; 0x23a4 <UART_Recieve+0x8>
		;
	return UDR;
    23ae:	ec e2       	ldi	r30, 0x2C	; 44
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
}
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	08 95       	ret

000023ba <UART_TransmitString>:
void UART_TransmitString(s8 *data) {
    23ba:	df 93       	push	r29
    23bc:	cf 93       	push	r28
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <UART_TransmitString+0x6>
    23c0:	0f 92       	push	r0
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
    23c6:	9b 83       	std	Y+3, r25	; 0x03
    23c8:	8a 83       	std	Y+2, r24	; 0x02
    23ca:	0e c0       	rjmp	.+28     	; 0x23e8 <UART_TransmitString+0x2e>
	u8 i;
	while (data[i] != '\0') {
		UART_TransmitChar(data[i]);
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	28 2f       	mov	r18, r24
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	9b 81       	ldd	r25, Y+3	; 0x03
    23d6:	fc 01       	movw	r30, r24
    23d8:	e2 0f       	add	r30, r18
    23da:	f3 1f       	adc	r31, r19
    23dc:	80 81       	ld	r24, Z
    23de:	0e 94 b7 11 	call	0x236e	; 0x236e <UART_TransmitChar>
		i++;
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	8f 5f       	subi	r24, 0xFF	; 255
    23e6:	89 83       	std	Y+1, r24	; 0x01
		;
	return UDR;
}
void UART_TransmitString(s8 *data) {
	u8 i;
	while (data[i] != '\0') {
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	9b 81       	ldd	r25, Y+3	; 0x03
    23f2:	fc 01       	movw	r30, r24
    23f4:	e2 0f       	add	r30, r18
    23f6:	f3 1f       	adc	r31, r19
    23f8:	80 81       	ld	r24, Z
    23fa:	88 23       	and	r24, r24
    23fc:	39 f7       	brne	.-50     	; 0x23cc <UART_TransmitString+0x12>
		UART_TransmitChar(data[i]);
		i++;
	}
}
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <main>:
#include "DIO.h"
#include "LCD.h"
#include "ADC.h"
#include <stdlib.h>

int main(void) {
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	cc 54       	subi	r28, 0x4C	; 76
    2414:	d0 40       	sbci	r29, 0x00	; 0
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	cd bf       	out	0x3d, r28	; 61
	//define uart pins
	DDRD &= ~(1 << 0); //RX
    2420:	a1 e3       	ldi	r26, 0x31	; 49
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e1 e3       	ldi	r30, 0x31	; 49
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	8e 7f       	andi	r24, 0xFE	; 254
    242c:	8c 93       	st	X, r24
	DDRD |= (1 << 1); //TX
    242e:	a1 e3       	ldi	r26, 0x31	; 49
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	e1 e3       	ldi	r30, 0x31	; 49
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	82 60       	ori	r24, 0x02	; 2
    243a:	8c 93       	st	X, r24
	PORTD &= ~(1 << 0); //RX
    243c:	a2 e3       	ldi	r26, 0x32	; 50
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	e2 e3       	ldi	r30, 0x32	; 50
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	8e 7f       	andi	r24, 0xFE	; 254
    2448:	8c 93       	st	X, r24
	PORTD &= ~(1 << 1); //TX
    244a:	a2 e3       	ldi	r26, 0x32	; 50
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	e2 e3       	ldi	r30, 0x32	; 50
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	8d 7f       	andi	r24, 0xFD	; 253
    2456:	8c 93       	st	X, r24
	UART_INIT();
    2458:	0e 94 98 11 	call	0x2330	; 0x2330 <UART_INIT>

	// flex sensor readings
	int temp[5] = { 0 };
    245c:	8a e0       	ldi	r24, 0x0A	; 10
    245e:	fe 01       	movw	r30, r28
    2460:	71 96       	adiw	r30, 0x11	; 17
    2462:	df 01       	movw	r26, r30
    2464:	98 2f       	mov	r25, r24
    2466:	1d 92       	st	X+, r1
    2468:	9a 95       	dec	r25
    246a:	e9 f7       	brne	.-6      	; 0x2466 <main+0x5c>
	int done = 0;
    246c:	18 8a       	std	Y+16, r1	; 0x10
    246e:	1f 86       	std	Y+15, r1	; 0x0f
	char string[50];

	DIO_Init();
    2470:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_Init>
	LCD_Init();
    2474:	0e 94 b3 09 	call	0x1366	; 0x1366 <LCD_Init>
	ADC_Init();
    2478:	0e 94 47 06 	call	0xc8e	; 0xc8e <ADC_Init>
	while (1) {
		temp[0] = ADC_Read(1); //read from channel 1
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	0e 94 56 06 	call	0xcac	; 0xcac <ADC_Read>
    2482:	9a 8b       	std	Y+18, r25	; 0x12
    2484:	89 8b       	std	Y+17, r24	; 0x11
		temp[0] = temp[0] - 204;
    2486:	89 89       	ldd	r24, Y+17	; 0x11
    2488:	9a 89       	ldd	r25, Y+18	; 0x12
    248a:	8c 5c       	subi	r24, 0xCC	; 204
    248c:	90 40       	sbci	r25, 0x00	; 0
    248e:	9a 8b       	std	Y+18, r25	; 0x12
    2490:	89 8b       	std	Y+17, r24	; 0x11
		itoa(temp[0], string, 10); //convert to char
    2492:	89 89       	ldd	r24, Y+17	; 0x11
    2494:	9a 89       	ldd	r25, Y+18	; 0x12
    2496:	9e 01       	movw	r18, r28
    2498:	25 5e       	subi	r18, 0xE5	; 229
    249a:	3f 4f       	sbci	r19, 0xFF	; 255
    249c:	b9 01       	movw	r22, r18
    249e:	4a e0       	ldi	r20, 0x0A	; 10
    24a0:	50 e0       	ldi	r21, 0x00	; 0
    24a2:	0e 94 ef 14 	call	0x29de	; 0x29de <itoa>
		if (temp[0] >= 0) {
    24a6:	89 89       	ldd	r24, Y+17	; 0x11
    24a8:	9a 89       	ldd	r25, Y+18	; 0x12
    24aa:	99 23       	and	r25, r25
    24ac:	2c f0       	brlt	.+10     	; 0x24b8 <main+0xae>
			LCD_String(string);
    24ae:	ce 01       	movw	r24, r28
    24b0:	4b 96       	adiw	r24, 0x1b	; 27
    24b2:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_String>
    24b6:	04 c0       	rjmp	.+8      	; 0x24c0 <main+0xb6>
		} else {
			LCD_String("0");
    24b8:	80 e6       	ldi	r24, 0x60	; 96
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_String>
		}

		temp[1] = ADC_Read(2); //read from channel 2
    24c0:	82 e0       	ldi	r24, 0x02	; 2
    24c2:	0e 94 56 06 	call	0xcac	; 0xcac <ADC_Read>
    24c6:	9c 8b       	std	Y+20, r25	; 0x14
    24c8:	8b 8b       	std	Y+19, r24	; 0x13
		temp[1] = temp[1] - 204;
    24ca:	8b 89       	ldd	r24, Y+19	; 0x13
    24cc:	9c 89       	ldd	r25, Y+20	; 0x14
    24ce:	8c 5c       	subi	r24, 0xCC	; 204
    24d0:	90 40       	sbci	r25, 0x00	; 0
    24d2:	9c 8b       	std	Y+20, r25	; 0x14
    24d4:	8b 8b       	std	Y+19, r24	; 0x13
		LCD_SetPos(1, 5);
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	65 e0       	ldi	r22, 0x05	; 5
    24da:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_SetPos>
		itoa(temp[1], string, 10); //convert to char
    24de:	8b 89       	ldd	r24, Y+19	; 0x13
    24e0:	9c 89       	ldd	r25, Y+20	; 0x14
    24e2:	9e 01       	movw	r18, r28
    24e4:	25 5e       	subi	r18, 0xE5	; 229
    24e6:	3f 4f       	sbci	r19, 0xFF	; 255
    24e8:	b9 01       	movw	r22, r18
    24ea:	4a e0       	ldi	r20, 0x0A	; 10
    24ec:	50 e0       	ldi	r21, 0x00	; 0
    24ee:	0e 94 ef 14 	call	0x29de	; 0x29de <itoa>
		if (temp[1] >= 0) {
    24f2:	8b 89       	ldd	r24, Y+19	; 0x13
    24f4:	9c 89       	ldd	r25, Y+20	; 0x14
    24f6:	99 23       	and	r25, r25
    24f8:	2c f0       	brlt	.+10     	; 0x2504 <main+0xfa>
			LCD_String(string);
    24fa:	ce 01       	movw	r24, r28
    24fc:	4b 96       	adiw	r24, 0x1b	; 27
    24fe:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_String>
    2502:	04 c0       	rjmp	.+8      	; 0x250c <main+0x102>
		} else {
			LCD_String("0");
    2504:	80 e6       	ldi	r24, 0x60	; 96
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_String>
		}

		temp[2] = ADC_Read(3); //read from channel 3
    250c:	83 e0       	ldi	r24, 0x03	; 3
    250e:	0e 94 56 06 	call	0xcac	; 0xcac <ADC_Read>
    2512:	9e 8b       	std	Y+22, r25	; 0x16
    2514:	8d 8b       	std	Y+21, r24	; 0x15
		temp[2] = temp[2] - 204;
    2516:	8d 89       	ldd	r24, Y+21	; 0x15
    2518:	9e 89       	ldd	r25, Y+22	; 0x16
    251a:	8c 5c       	subi	r24, 0xCC	; 204
    251c:	90 40       	sbci	r25, 0x00	; 0
    251e:	9e 8b       	std	Y+22, r25	; 0x16
    2520:	8d 8b       	std	Y+21, r24	; 0x15
		LCD_SetPos(1, 10);
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	6a e0       	ldi	r22, 0x0A	; 10
    2526:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_SetPos>
		itoa(temp[2], string, 10); //convert to char
    252a:	8d 89       	ldd	r24, Y+21	; 0x15
    252c:	9e 89       	ldd	r25, Y+22	; 0x16
    252e:	9e 01       	movw	r18, r28
    2530:	25 5e       	subi	r18, 0xE5	; 229
    2532:	3f 4f       	sbci	r19, 0xFF	; 255
    2534:	b9 01       	movw	r22, r18
    2536:	4a e0       	ldi	r20, 0x0A	; 10
    2538:	50 e0       	ldi	r21, 0x00	; 0
    253a:	0e 94 ef 14 	call	0x29de	; 0x29de <itoa>
		if (temp[2] >= 0) {
    253e:	8d 89       	ldd	r24, Y+21	; 0x15
    2540:	9e 89       	ldd	r25, Y+22	; 0x16
    2542:	99 23       	and	r25, r25
    2544:	2c f0       	brlt	.+10     	; 0x2550 <main+0x146>
			LCD_String(string);
    2546:	ce 01       	movw	r24, r28
    2548:	4b 96       	adiw	r24, 0x1b	; 27
    254a:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_String>
    254e:	04 c0       	rjmp	.+8      	; 0x2558 <main+0x14e>
		} else {
			LCD_String("0");
    2550:	80 e6       	ldi	r24, 0x60	; 96
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_String>
		}

		temp[3] = ADC_Read(4); //read from channel 4
    2558:	84 e0       	ldi	r24, 0x04	; 4
    255a:	0e 94 56 06 	call	0xcac	; 0xcac <ADC_Read>
    255e:	98 8f       	std	Y+24, r25	; 0x18
    2560:	8f 8b       	std	Y+23, r24	; 0x17
		temp[3] = temp[3] - 204;
    2562:	8f 89       	ldd	r24, Y+23	; 0x17
    2564:	98 8d       	ldd	r25, Y+24	; 0x18
    2566:	8c 5c       	subi	r24, 0xCC	; 204
    2568:	90 40       	sbci	r25, 0x00	; 0
    256a:	98 8f       	std	Y+24, r25	; 0x18
    256c:	8f 8b       	std	Y+23, r24	; 0x17
		LCD_SetPos(2, 3);
    256e:	82 e0       	ldi	r24, 0x02	; 2
    2570:	63 e0       	ldi	r22, 0x03	; 3
    2572:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_SetPos>
		itoa(temp[3], string, 10); //convert to char
    2576:	8f 89       	ldd	r24, Y+23	; 0x17
    2578:	98 8d       	ldd	r25, Y+24	; 0x18
    257a:	9e 01       	movw	r18, r28
    257c:	25 5e       	subi	r18, 0xE5	; 229
    257e:	3f 4f       	sbci	r19, 0xFF	; 255
    2580:	b9 01       	movw	r22, r18
    2582:	4a e0       	ldi	r20, 0x0A	; 10
    2584:	50 e0       	ldi	r21, 0x00	; 0
    2586:	0e 94 ef 14 	call	0x29de	; 0x29de <itoa>
		if (temp[3] >= 0) {
    258a:	8f 89       	ldd	r24, Y+23	; 0x17
    258c:	98 8d       	ldd	r25, Y+24	; 0x18
    258e:	99 23       	and	r25, r25
    2590:	2c f0       	brlt	.+10     	; 0x259c <main+0x192>
			LCD_String(string);
    2592:	ce 01       	movw	r24, r28
    2594:	4b 96       	adiw	r24, 0x1b	; 27
    2596:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_String>
    259a:	04 c0       	rjmp	.+8      	; 0x25a4 <main+0x19a>
		} else {
			LCD_String("0");
    259c:	80 e6       	ldi	r24, 0x60	; 96
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_String>
		}

		temp[4] = ADC_Read(5); //read from channel 5
    25a4:	85 e0       	ldi	r24, 0x05	; 5
    25a6:	0e 94 56 06 	call	0xcac	; 0xcac <ADC_Read>
    25aa:	9a 8f       	std	Y+26, r25	; 0x1a
    25ac:	89 8f       	std	Y+25, r24	; 0x19
		temp[4] = temp[4] - 204;
    25ae:	89 8d       	ldd	r24, Y+25	; 0x19
    25b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25b2:	8c 5c       	subi	r24, 0xCC	; 204
    25b4:	90 40       	sbci	r25, 0x00	; 0
    25b6:	9a 8f       	std	Y+26, r25	; 0x1a
    25b8:	89 8f       	std	Y+25, r24	; 0x19
		LCD_SetPos(2, 8);
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	68 e0       	ldi	r22, 0x08	; 8
    25be:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_SetPos>
		itoa(temp[4], string, 10); //convert to char
    25c2:	89 8d       	ldd	r24, Y+25	; 0x19
    25c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25c6:	9e 01       	movw	r18, r28
    25c8:	25 5e       	subi	r18, 0xE5	; 229
    25ca:	3f 4f       	sbci	r19, 0xFF	; 255
    25cc:	b9 01       	movw	r22, r18
    25ce:	4a e0       	ldi	r20, 0x0A	; 10
    25d0:	50 e0       	ldi	r21, 0x00	; 0
    25d2:	0e 94 ef 14 	call	0x29de	; 0x29de <itoa>
		if (temp[4] >= 0) {
    25d6:	89 8d       	ldd	r24, Y+25	; 0x19
    25d8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25da:	99 23       	and	r25, r25
    25dc:	2c f0       	brlt	.+10     	; 0x25e8 <main+0x1de>
			LCD_String(string);
    25de:	ce 01       	movw	r24, r28
    25e0:	4b 96       	adiw	r24, 0x1b	; 27
    25e2:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_String>
    25e6:	04 c0       	rjmp	.+8      	; 0x25f0 <main+0x1e6>
		} else {
			LCD_String("0");
    25e8:	80 e6       	ldi	r24, 0x60	; 96
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_String>
		}

		LCD_SetPos(2, 14);
    25f0:	82 e0       	ldi	r24, 0x02	; 2
    25f2:	6e e0       	ldi	r22, 0x0E	; 14
    25f4:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_SetPos>
		// Stop gesture
		if (temp[0] >= 0 && temp[0] <= 80) {
    25f8:	89 89       	ldd	r24, Y+17	; 0x11
    25fa:	9a 89       	ldd	r25, Y+18	; 0x12
    25fc:	99 23       	and	r25, r25
    25fe:	ac f1       	brlt	.+106    	; 0x266a <main+0x260>
    2600:	89 89       	ldd	r24, Y+17	; 0x11
    2602:	9a 89       	ldd	r25, Y+18	; 0x12
    2604:	81 35       	cpi	r24, 0x51	; 81
    2606:	91 05       	cpc	r25, r1
    2608:	84 f5       	brge	.+96     	; 0x266a <main+0x260>
			if (temp[1] >= 0 && temp[1] <= 80) {
    260a:	8b 89       	ldd	r24, Y+19	; 0x13
    260c:	9c 89       	ldd	r25, Y+20	; 0x14
    260e:	99 23       	and	r25, r25
    2610:	64 f1       	brlt	.+88     	; 0x266a <main+0x260>
    2612:	8b 89       	ldd	r24, Y+19	; 0x13
    2614:	9c 89       	ldd	r25, Y+20	; 0x14
    2616:	81 35       	cpi	r24, 0x51	; 81
    2618:	91 05       	cpc	r25, r1
    261a:	3c f5       	brge	.+78     	; 0x266a <main+0x260>
				if (temp[2] >= 0 && temp[2] <= 80) {
    261c:	8d 89       	ldd	r24, Y+21	; 0x15
    261e:	9e 89       	ldd	r25, Y+22	; 0x16
    2620:	99 23       	and	r25, r25
    2622:	1c f1       	brlt	.+70     	; 0x266a <main+0x260>
    2624:	8d 89       	ldd	r24, Y+21	; 0x15
    2626:	9e 89       	ldd	r25, Y+22	; 0x16
    2628:	81 35       	cpi	r24, 0x51	; 81
    262a:	91 05       	cpc	r25, r1
    262c:	f4 f4       	brge	.+60     	; 0x266a <main+0x260>
					if (temp[3] >= 0 && temp[3] <= 80) {
    262e:	8f 89       	ldd	r24, Y+23	; 0x17
    2630:	98 8d       	ldd	r25, Y+24	; 0x18
    2632:	99 23       	and	r25, r25
    2634:	d4 f0       	brlt	.+52     	; 0x266a <main+0x260>
    2636:	8f 89       	ldd	r24, Y+23	; 0x17
    2638:	98 8d       	ldd	r25, Y+24	; 0x18
    263a:	81 35       	cpi	r24, 0x51	; 81
    263c:	91 05       	cpc	r25, r1
    263e:	ac f4       	brge	.+42     	; 0x266a <main+0x260>
						if (temp[4] >= 0 && temp[4] <= 80) {
    2640:	89 8d       	ldd	r24, Y+25	; 0x19
    2642:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2644:	99 23       	and	r25, r25
    2646:	8c f0       	brlt	.+34     	; 0x266a <main+0x260>
    2648:	89 8d       	ldd	r24, Y+25	; 0x19
    264a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    264c:	81 35       	cpi	r24, 0x51	; 81
    264e:	91 05       	cpc	r25, r1
    2650:	64 f4       	brge	.+24     	; 0x266a <main+0x260>
							UART_TransmitChar('0');
    2652:	80 e3       	ldi	r24, 0x30	; 48
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	0e 94 b7 11 	call	0x236e	; 0x236e <UART_TransmitChar>
							LCD_String("0");
    265a:	80 e6       	ldi	r24, 0x60	; 96
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_String>
							done = 1;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	98 8b       	std	Y+16, r25	; 0x10
    2668:	8f 87       	std	Y+15, r24	; 0x0f
				}
			}
		}
		// move forward gesture
		//if (done = 0) {
			if (temp[0] >= 150) {
    266a:	89 89       	ldd	r24, Y+17	; 0x11
    266c:	9a 89       	ldd	r25, Y+18	; 0x12
    266e:	86 39       	cpi	r24, 0x96	; 150
    2670:	91 05       	cpc	r25, r1
    2672:	b4 f1       	brlt	.+108    	; 0x26e0 <main+0x2d6>
				if (temp[2] >= 150) {
    2674:	8d 89       	ldd	r24, Y+21	; 0x15
    2676:	9e 89       	ldd	r25, Y+22	; 0x16
    2678:	86 39       	cpi	r24, 0x96	; 150
    267a:	91 05       	cpc	r25, r1
    267c:	8c f1       	brlt	.+98     	; 0x26e0 <main+0x2d6>
					if (temp[3] >= 150) {
    267e:	8f 89       	ldd	r24, Y+23	; 0x17
    2680:	98 8d       	ldd	r25, Y+24	; 0x18
    2682:	86 39       	cpi	r24, 0x96	; 150
    2684:	91 05       	cpc	r25, r1
    2686:	64 f1       	brlt	.+88     	; 0x26e0 <main+0x2d6>
						if (temp[4] >= 150) {
    2688:	89 8d       	ldd	r24, Y+25	; 0x19
    268a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    268c:	86 39       	cpi	r24, 0x96	; 150
    268e:	91 05       	cpc	r25, r1
    2690:	3c f1       	brlt	.+78     	; 0x26e0 <main+0x2d6>
							if (temp[1] >= 0 && temp[1] <= 80) {
    2692:	8b 89       	ldd	r24, Y+19	; 0x13
    2694:	9c 89       	ldd	r25, Y+20	; 0x14
    2696:	99 23       	and	r25, r25
    2698:	94 f0       	brlt	.+36     	; 0x26be <main+0x2b4>
    269a:	8b 89       	ldd	r24, Y+19	; 0x13
    269c:	9c 89       	ldd	r25, Y+20	; 0x14
    269e:	81 35       	cpi	r24, 0x51	; 81
    26a0:	91 05       	cpc	r25, r1
    26a2:	6c f4       	brge	.+26     	; 0x26be <main+0x2b4>
								UART_TransmitChar('1');
    26a4:	81 e3       	ldi	r24, 0x31	; 49
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	0e 94 b7 11 	call	0x236e	; 0x236e <UART_TransmitChar>
								LCD_String("1");
    26ac:	82 e6       	ldi	r24, 0x62	; 98
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_String>
								done = 1;
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	98 8b       	std	Y+16, r25	; 0x10
    26ba:	8f 87       	std	Y+15, r24	; 0x0f
    26bc:	11 c0       	rjmp	.+34     	; 0x26e0 <main+0x2d6>
							} else if (temp[1] >= 80) {
    26be:	8b 89       	ldd	r24, Y+19	; 0x13
    26c0:	9c 89       	ldd	r25, Y+20	; 0x14
    26c2:	80 35       	cpi	r24, 0x50	; 80
    26c4:	91 05       	cpc	r25, r1
    26c6:	64 f0       	brlt	.+24     	; 0x26e0 <main+0x2d6>
								UART_TransmitChar('2');
    26c8:	82 e3       	ldi	r24, 0x32	; 50
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	0e 94 b7 11 	call	0x236e	; 0x236e <UART_TransmitChar>
								LCD_String("2");
    26d0:	84 e6       	ldi	r24, 0x64	; 100
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_String>
								done = 1;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	98 8b       	std	Y+16, r25	; 0x10
    26de:	8f 87       	std	Y+15, r24	; 0x0f
				}
			}
		//}
		// move right gesture
		//if (done = 0) {
			if (temp[0] >= 150) {
    26e0:	89 89       	ldd	r24, Y+17	; 0x11
    26e2:	9a 89       	ldd	r25, Y+18	; 0x12
    26e4:	86 39       	cpi	r24, 0x96	; 150
    26e6:	91 05       	cpc	r25, r1
    26e8:	d4 f1       	brlt	.+116    	; 0x275e <main+0x354>
				if (temp[3] >= 150) {
    26ea:	8f 89       	ldd	r24, Y+23	; 0x17
    26ec:	98 8d       	ldd	r25, Y+24	; 0x18
    26ee:	86 39       	cpi	r24, 0x96	; 150
    26f0:	91 05       	cpc	r25, r1
    26f2:	ac f1       	brlt	.+106    	; 0x275e <main+0x354>
					if (temp[4] >= 150) {
    26f4:	89 8d       	ldd	r24, Y+25	; 0x19
    26f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    26f8:	86 39       	cpi	r24, 0x96	; 150
    26fa:	91 05       	cpc	r25, r1
    26fc:	84 f1       	brlt	.+96     	; 0x275e <main+0x354>
						if (temp[2] >= 0 && temp[2] <= 80) {
    26fe:	8d 89       	ldd	r24, Y+21	; 0x15
    2700:	9e 89       	ldd	r25, Y+22	; 0x16
    2702:	99 23       	and	r25, r25
    2704:	64 f1       	brlt	.+88     	; 0x275e <main+0x354>
    2706:	8d 89       	ldd	r24, Y+21	; 0x15
    2708:	9e 89       	ldd	r25, Y+22	; 0x16
    270a:	81 35       	cpi	r24, 0x51	; 81
    270c:	91 05       	cpc	r25, r1
    270e:	3c f5       	brge	.+78     	; 0x275e <main+0x354>
							if (temp[1] >= 0 && temp[1] <= 80) {
    2710:	8b 89       	ldd	r24, Y+19	; 0x13
    2712:	9c 89       	ldd	r25, Y+20	; 0x14
    2714:	99 23       	and	r25, r25
    2716:	94 f0       	brlt	.+36     	; 0x273c <main+0x332>
    2718:	8b 89       	ldd	r24, Y+19	; 0x13
    271a:	9c 89       	ldd	r25, Y+20	; 0x14
    271c:	81 35       	cpi	r24, 0x51	; 81
    271e:	91 05       	cpc	r25, r1
    2720:	6c f4       	brge	.+26     	; 0x273c <main+0x332>
								UART_TransmitChar('3');
    2722:	83 e3       	ldi	r24, 0x33	; 51
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	0e 94 b7 11 	call	0x236e	; 0x236e <UART_TransmitChar>
								LCD_String("3");
    272a:	86 e6       	ldi	r24, 0x66	; 102
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_String>
								done = 1;
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	98 8b       	std	Y+16, r25	; 0x10
    2738:	8f 87       	std	Y+15, r24	; 0x0f
    273a:	11 c0       	rjmp	.+34     	; 0x275e <main+0x354>
							} else if (temp[1] >= 80) {
    273c:	8b 89       	ldd	r24, Y+19	; 0x13
    273e:	9c 89       	ldd	r25, Y+20	; 0x14
    2740:	80 35       	cpi	r24, 0x50	; 80
    2742:	91 05       	cpc	r25, r1
    2744:	64 f0       	brlt	.+24     	; 0x275e <main+0x354>
								UART_TransmitChar('4');
    2746:	84 e3       	ldi	r24, 0x34	; 52
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	0e 94 b7 11 	call	0x236e	; 0x236e <UART_TransmitChar>
								LCD_String("4");
    274e:	88 e6       	ldi	r24, 0x68	; 104
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_String>
								done = 1;
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	98 8b       	std	Y+16, r25	; 0x10
    275c:	8f 87       	std	Y+15, r24	; 0x0f
				}
			}
	//	}
		// move left gesture
		//if (done = 0) {
			if (temp[0] >= 150) {
    275e:	89 89       	ldd	r24, Y+17	; 0x11
    2760:	9a 89       	ldd	r25, Y+18	; 0x12
    2762:	86 39       	cpi	r24, 0x96	; 150
    2764:	91 05       	cpc	r25, r1
    2766:	0c f4       	brge	.+2      	; 0x276a <main+0x360>
    2768:	3e c0       	rjmp	.+124    	; 0x27e6 <main+0x3dc>
				if (temp[4] >= 150) {
    276a:	89 8d       	ldd	r24, Y+25	; 0x19
    276c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    276e:	86 39       	cpi	r24, 0x96	; 150
    2770:	91 05       	cpc	r25, r1
    2772:	cc f1       	brlt	.+114    	; 0x27e6 <main+0x3dc>
					if (temp[3] >= 0 && temp[3] <= 80) {
    2774:	8f 89       	ldd	r24, Y+23	; 0x17
    2776:	98 8d       	ldd	r25, Y+24	; 0x18
    2778:	99 23       	and	r25, r25
    277a:	ac f1       	brlt	.+106    	; 0x27e6 <main+0x3dc>
    277c:	8f 89       	ldd	r24, Y+23	; 0x17
    277e:	98 8d       	ldd	r25, Y+24	; 0x18
    2780:	81 35       	cpi	r24, 0x51	; 81
    2782:	91 05       	cpc	r25, r1
    2784:	84 f5       	brge	.+96     	; 0x27e6 <main+0x3dc>
						if (temp[2] >= 0 && temp[2] <= 80) {
    2786:	8d 89       	ldd	r24, Y+21	; 0x15
    2788:	9e 89       	ldd	r25, Y+22	; 0x16
    278a:	99 23       	and	r25, r25
    278c:	64 f1       	brlt	.+88     	; 0x27e6 <main+0x3dc>
    278e:	8d 89       	ldd	r24, Y+21	; 0x15
    2790:	9e 89       	ldd	r25, Y+22	; 0x16
    2792:	81 35       	cpi	r24, 0x51	; 81
    2794:	91 05       	cpc	r25, r1
    2796:	3c f5       	brge	.+78     	; 0x27e6 <main+0x3dc>
							if (temp[1] >= 0 && temp[1] <= 80) {
    2798:	8b 89       	ldd	r24, Y+19	; 0x13
    279a:	9c 89       	ldd	r25, Y+20	; 0x14
    279c:	99 23       	and	r25, r25
    279e:	94 f0       	brlt	.+36     	; 0x27c4 <main+0x3ba>
    27a0:	8b 89       	ldd	r24, Y+19	; 0x13
    27a2:	9c 89       	ldd	r25, Y+20	; 0x14
    27a4:	81 35       	cpi	r24, 0x51	; 81
    27a6:	91 05       	cpc	r25, r1
    27a8:	6c f4       	brge	.+26     	; 0x27c4 <main+0x3ba>
								UART_TransmitChar('5');
    27aa:	85 e3       	ldi	r24, 0x35	; 53
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	0e 94 b7 11 	call	0x236e	; 0x236e <UART_TransmitChar>
								LCD_String("5");
    27b2:	8a e6       	ldi	r24, 0x6A	; 106
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_String>
								done = 1;
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	98 8b       	std	Y+16, r25	; 0x10
    27c0:	8f 87       	std	Y+15, r24	; 0x0f
    27c2:	11 c0       	rjmp	.+34     	; 0x27e6 <main+0x3dc>
							} else if (temp[1] >= 80) {
    27c4:	8b 89       	ldd	r24, Y+19	; 0x13
    27c6:	9c 89       	ldd	r25, Y+20	; 0x14
    27c8:	80 35       	cpi	r24, 0x50	; 80
    27ca:	91 05       	cpc	r25, r1
    27cc:	64 f0       	brlt	.+24     	; 0x27e6 <main+0x3dc>
								UART_TransmitChar('6');
    27ce:	86 e3       	ldi	r24, 0x36	; 54
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	0e 94 b7 11 	call	0x236e	; 0x236e <UART_TransmitChar>
								LCD_String("6");
    27d6:	8c e6       	ldi	r24, 0x6C	; 108
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_String>
								done = 1;
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	98 8b       	std	Y+16, r25	; 0x10
    27e4:	8f 87       	std	Y+15, r24	; 0x0f
				}
			}
		//}
		// move backward gesture
		//if (done = 0) {
			if (temp[0] >= 150) {
    27e6:	89 89       	ldd	r24, Y+17	; 0x11
    27e8:	9a 89       	ldd	r25, Y+18	; 0x12
    27ea:	86 39       	cpi	r24, 0x96	; 150
    27ec:	91 05       	cpc	r25, r1
    27ee:	0c f4       	brge	.+2      	; 0x27f2 <main+0x3e8>
    27f0:	43 c0       	rjmp	.+134    	; 0x2878 <main+0x46e>
				if (temp[4] >= 0 && temp[4] <= 80) {
    27f2:	89 8d       	ldd	r24, Y+25	; 0x19
    27f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27f6:	99 23       	and	r25, r25
    27f8:	0c f4       	brge	.+2      	; 0x27fc <main+0x3f2>
    27fa:	3e c0       	rjmp	.+124    	; 0x2878 <main+0x46e>
    27fc:	89 8d       	ldd	r24, Y+25	; 0x19
    27fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2800:	81 35       	cpi	r24, 0x51	; 81
    2802:	91 05       	cpc	r25, r1
    2804:	cc f5       	brge	.+114    	; 0x2878 <main+0x46e>
					if (temp[3] >= 0 && temp[3] <= 80) {
    2806:	8f 89       	ldd	r24, Y+23	; 0x17
    2808:	98 8d       	ldd	r25, Y+24	; 0x18
    280a:	99 23       	and	r25, r25
    280c:	ac f1       	brlt	.+106    	; 0x2878 <main+0x46e>
    280e:	8f 89       	ldd	r24, Y+23	; 0x17
    2810:	98 8d       	ldd	r25, Y+24	; 0x18
    2812:	81 35       	cpi	r24, 0x51	; 81
    2814:	91 05       	cpc	r25, r1
    2816:	84 f5       	brge	.+96     	; 0x2878 <main+0x46e>
						if (temp[2] >= 0 && temp[2] <= 80) {
    2818:	8d 89       	ldd	r24, Y+21	; 0x15
    281a:	9e 89       	ldd	r25, Y+22	; 0x16
    281c:	99 23       	and	r25, r25
    281e:	64 f1       	brlt	.+88     	; 0x2878 <main+0x46e>
    2820:	8d 89       	ldd	r24, Y+21	; 0x15
    2822:	9e 89       	ldd	r25, Y+22	; 0x16
    2824:	81 35       	cpi	r24, 0x51	; 81
    2826:	91 05       	cpc	r25, r1
    2828:	3c f5       	brge	.+78     	; 0x2878 <main+0x46e>
							if (temp[1] >= 0 && temp[1] <= 80) {
    282a:	8b 89       	ldd	r24, Y+19	; 0x13
    282c:	9c 89       	ldd	r25, Y+20	; 0x14
    282e:	99 23       	and	r25, r25
    2830:	94 f0       	brlt	.+36     	; 0x2856 <main+0x44c>
    2832:	8b 89       	ldd	r24, Y+19	; 0x13
    2834:	9c 89       	ldd	r25, Y+20	; 0x14
    2836:	81 35       	cpi	r24, 0x51	; 81
    2838:	91 05       	cpc	r25, r1
    283a:	6c f4       	brge	.+26     	; 0x2856 <main+0x44c>
								UART_TransmitChar('7');
    283c:	87 e3       	ldi	r24, 0x37	; 55
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	0e 94 b7 11 	call	0x236e	; 0x236e <UART_TransmitChar>
								LCD_String("7");
    2844:	8e e6       	ldi	r24, 0x6E	; 110
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_String>
								done = 1;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	98 8b       	std	Y+16, r25	; 0x10
    2852:	8f 87       	std	Y+15, r24	; 0x0f
    2854:	11 c0       	rjmp	.+34     	; 0x2878 <main+0x46e>
							} else if (temp[1] >= 80) {
    2856:	8b 89       	ldd	r24, Y+19	; 0x13
    2858:	9c 89       	ldd	r25, Y+20	; 0x14
    285a:	80 35       	cpi	r24, 0x50	; 80
    285c:	91 05       	cpc	r25, r1
    285e:	64 f0       	brlt	.+24     	; 0x2878 <main+0x46e>
								UART_TransmitChar('8');
    2860:	88 e3       	ldi	r24, 0x38	; 56
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	0e 94 b7 11 	call	0x236e	; 0x236e <UART_TransmitChar>
								LCD_String("8");
    2868:	80 e7       	ldi	r24, 0x70	; 112
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_String>
								done = 1;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	98 8b       	std	Y+16, r25	; 0x10
    2876:	8f 87       	std	Y+15, r24	; 0x0f
						}
					}
				}
			}
	//	}
		done = 0;
    2878:	18 8a       	std	Y+16, r1	; 0x10
    287a:	1f 86       	std	Y+15, r1	; 0x0f
		LCD_SetPos(1, 0);
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	60 e0       	ldi	r22, 0x00	; 0
    2880:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_SetPos>
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	a8 e4       	ldi	r26, 0x48	; 72
    288a:	b3 e4       	ldi	r27, 0x43	; 67
    288c:	8b 87       	std	Y+11, r24	; 0x0b
    288e:	9c 87       	std	Y+12, r25	; 0x0c
    2890:	ad 87       	std	Y+13, r26	; 0x0d
    2892:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2894:	6b 85       	ldd	r22, Y+11	; 0x0b
    2896:	7c 85       	ldd	r23, Y+12	; 0x0c
    2898:	8d 85       	ldd	r24, Y+13	; 0x0d
    289a:	9e 85       	ldd	r25, Y+14	; 0x0e
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	4a ef       	ldi	r20, 0xFA	; 250
    28a2:	54 e4       	ldi	r21, 0x44	; 68
    28a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	8f 83       	std	Y+7, r24	; 0x07
    28ae:	98 87       	std	Y+8, r25	; 0x08
    28b0:	a9 87       	std	Y+9, r26	; 0x09
    28b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28b4:	6f 81       	ldd	r22, Y+7	; 0x07
    28b6:	78 85       	ldd	r23, Y+8	; 0x08
    28b8:	89 85       	ldd	r24, Y+9	; 0x09
    28ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e8       	ldi	r20, 0x80	; 128
    28c2:	5f e3       	ldi	r21, 0x3F	; 63
    28c4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28c8:	88 23       	and	r24, r24
    28ca:	2c f4       	brge	.+10     	; 0x28d6 <main+0x4cc>
		__ticks = 1;
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	9e 83       	std	Y+6, r25	; 0x06
    28d2:	8d 83       	std	Y+5, r24	; 0x05
    28d4:	3f c0       	rjmp	.+126    	; 0x2954 <main+0x54a>
	else if (__tmp > 65535)
    28d6:	6f 81       	ldd	r22, Y+7	; 0x07
    28d8:	78 85       	ldd	r23, Y+8	; 0x08
    28da:	89 85       	ldd	r24, Y+9	; 0x09
    28dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	3f ef       	ldi	r19, 0xFF	; 255
    28e2:	4f e7       	ldi	r20, 0x7F	; 127
    28e4:	57 e4       	ldi	r21, 0x47	; 71
    28e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28ea:	18 16       	cp	r1, r24
    28ec:	4c f5       	brge	.+82     	; 0x2940 <main+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e2       	ldi	r20, 0x20	; 32
    28fc:	51 e4       	ldi	r21, 0x41	; 65
    28fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	bc 01       	movw	r22, r24
    2908:	cd 01       	movw	r24, r26
    290a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	9e 83       	std	Y+6, r25	; 0x06
    2914:	8d 83       	std	Y+5, r24	; 0x05
    2916:	0f c0       	rjmp	.+30     	; 0x2936 <main+0x52c>
    2918:	88 ec       	ldi	r24, 0xC8	; 200
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	9c 83       	std	Y+4, r25	; 0x04
    291e:	8b 83       	std	Y+3, r24	; 0x03
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	9c 81       	ldd	r25, Y+4	; 0x04
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	f1 f7       	brne	.-4      	; 0x2924 <main+0x51a>
    2928:	9c 83       	std	Y+4, r25	; 0x04
    292a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292c:	8d 81       	ldd	r24, Y+5	; 0x05
    292e:	9e 81       	ldd	r25, Y+6	; 0x06
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	9e 83       	std	Y+6, r25	; 0x06
    2934:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2936:	8d 81       	ldd	r24, Y+5	; 0x05
    2938:	9e 81       	ldd	r25, Y+6	; 0x06
    293a:	00 97       	sbiw	r24, 0x00	; 0
    293c:	69 f7       	brne	.-38     	; 0x2918 <main+0x50e>
    293e:	14 c0       	rjmp	.+40     	; 0x2968 <main+0x55e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2940:	6f 81       	ldd	r22, Y+7	; 0x07
    2942:	78 85       	ldd	r23, Y+8	; 0x08
    2944:	89 85       	ldd	r24, Y+9	; 0x09
    2946:	9a 85       	ldd	r25, Y+10	; 0x0a
    2948:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	9e 83       	std	Y+6, r25	; 0x06
    2952:	8d 83       	std	Y+5, r24	; 0x05
    2954:	8d 81       	ldd	r24, Y+5	; 0x05
    2956:	9e 81       	ldd	r25, Y+6	; 0x06
    2958:	9a 83       	std	Y+2, r25	; 0x02
    295a:	89 83       	std	Y+1, r24	; 0x01
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	9a 81       	ldd	r25, Y+2	; 0x02
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	f1 f7       	brne	.-4      	; 0x2960 <main+0x556>
    2964:	9a 83       	std	Y+2, r25	; 0x02
    2966:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		LCD_Cmd(0x01); //clear LCD
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Cmd>
    296e:	86 cd       	rjmp	.-1268   	; 0x247c <main+0x72>

00002970 <__prologue_saves__>:
    2970:	2f 92       	push	r2
    2972:	3f 92       	push	r3
    2974:	4f 92       	push	r4
    2976:	5f 92       	push	r5
    2978:	6f 92       	push	r6
    297a:	7f 92       	push	r7
    297c:	8f 92       	push	r8
    297e:	9f 92       	push	r9
    2980:	af 92       	push	r10
    2982:	bf 92       	push	r11
    2984:	cf 92       	push	r12
    2986:	df 92       	push	r13
    2988:	ef 92       	push	r14
    298a:	ff 92       	push	r15
    298c:	0f 93       	push	r16
    298e:	1f 93       	push	r17
    2990:	cf 93       	push	r28
    2992:	df 93       	push	r29
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	ca 1b       	sub	r28, r26
    299a:	db 0b       	sbc	r29, r27
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	f8 94       	cli
    29a0:	de bf       	out	0x3e, r29	; 62
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	cd bf       	out	0x3d, r28	; 61
    29a6:	09 94       	ijmp

000029a8 <__epilogue_restores__>:
    29a8:	2a 88       	ldd	r2, Y+18	; 0x12
    29aa:	39 88       	ldd	r3, Y+17	; 0x11
    29ac:	48 88       	ldd	r4, Y+16	; 0x10
    29ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    29b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    29b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    29b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    29b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    29b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    29ba:	b9 84       	ldd	r11, Y+9	; 0x09
    29bc:	c8 84       	ldd	r12, Y+8	; 0x08
    29be:	df 80       	ldd	r13, Y+7	; 0x07
    29c0:	ee 80       	ldd	r14, Y+6	; 0x06
    29c2:	fd 80       	ldd	r15, Y+5	; 0x05
    29c4:	0c 81       	ldd	r16, Y+4	; 0x04
    29c6:	1b 81       	ldd	r17, Y+3	; 0x03
    29c8:	aa 81       	ldd	r26, Y+2	; 0x02
    29ca:	b9 81       	ldd	r27, Y+1	; 0x01
    29cc:	ce 0f       	add	r28, r30
    29ce:	d1 1d       	adc	r29, r1
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	cd bf       	out	0x3d, r28	; 61
    29da:	ed 01       	movw	r28, r26
    29dc:	08 95       	ret

000029de <itoa>:
    29de:	fb 01       	movw	r30, r22
    29e0:	9f 01       	movw	r18, r30
    29e2:	e8 94       	clt
    29e4:	42 30       	cpi	r20, 0x02	; 2
    29e6:	c4 f0       	brlt	.+48     	; 0x2a18 <itoa+0x3a>
    29e8:	45 32       	cpi	r20, 0x25	; 37
    29ea:	b4 f4       	brge	.+44     	; 0x2a18 <itoa+0x3a>
    29ec:	4a 30       	cpi	r20, 0x0A	; 10
    29ee:	29 f4       	brne	.+10     	; 0x29fa <itoa+0x1c>
    29f0:	97 fb       	bst	r25, 7
    29f2:	1e f4       	brtc	.+6      	; 0x29fa <itoa+0x1c>
    29f4:	90 95       	com	r25
    29f6:	81 95       	neg	r24
    29f8:	9f 4f       	sbci	r25, 0xFF	; 255
    29fa:	64 2f       	mov	r22, r20
    29fc:	77 27       	eor	r23, r23
    29fe:	0e 94 20 15 	call	0x2a40	; 0x2a40 <__udivmodhi4>
    2a02:	80 5d       	subi	r24, 0xD0	; 208
    2a04:	8a 33       	cpi	r24, 0x3A	; 58
    2a06:	0c f0       	brlt	.+2      	; 0x2a0a <itoa+0x2c>
    2a08:	89 5d       	subi	r24, 0xD9	; 217
    2a0a:	81 93       	st	Z+, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	00 97       	sbiw	r24, 0x00	; 0
    2a10:	a1 f7       	brne	.-24     	; 0x29fa <itoa+0x1c>
    2a12:	16 f4       	brtc	.+4      	; 0x2a18 <itoa+0x3a>
    2a14:	5d e2       	ldi	r21, 0x2D	; 45
    2a16:	51 93       	st	Z+, r21
    2a18:	10 82       	st	Z, r1
    2a1a:	c9 01       	movw	r24, r18
    2a1c:	0c 94 10 15 	jmp	0x2a20	; 0x2a20 <strrev>

00002a20 <strrev>:
    2a20:	dc 01       	movw	r26, r24
    2a22:	fc 01       	movw	r30, r24
    2a24:	67 2f       	mov	r22, r23
    2a26:	71 91       	ld	r23, Z+
    2a28:	77 23       	and	r23, r23
    2a2a:	e1 f7       	brne	.-8      	; 0x2a24 <strrev+0x4>
    2a2c:	32 97       	sbiw	r30, 0x02	; 2
    2a2e:	04 c0       	rjmp	.+8      	; 0x2a38 <strrev+0x18>
    2a30:	7c 91       	ld	r23, X
    2a32:	6d 93       	st	X+, r22
    2a34:	70 83       	st	Z, r23
    2a36:	62 91       	ld	r22, -Z
    2a38:	ae 17       	cp	r26, r30
    2a3a:	bf 07       	cpc	r27, r31
    2a3c:	c8 f3       	brcs	.-14     	; 0x2a30 <strrev+0x10>
    2a3e:	08 95       	ret

00002a40 <__udivmodhi4>:
    2a40:	aa 1b       	sub	r26, r26
    2a42:	bb 1b       	sub	r27, r27
    2a44:	51 e1       	ldi	r21, 0x11	; 17
    2a46:	07 c0       	rjmp	.+14     	; 0x2a56 <__udivmodhi4_ep>

00002a48 <__udivmodhi4_loop>:
    2a48:	aa 1f       	adc	r26, r26
    2a4a:	bb 1f       	adc	r27, r27
    2a4c:	a6 17       	cp	r26, r22
    2a4e:	b7 07       	cpc	r27, r23
    2a50:	10 f0       	brcs	.+4      	; 0x2a56 <__udivmodhi4_ep>
    2a52:	a6 1b       	sub	r26, r22
    2a54:	b7 0b       	sbc	r27, r23

00002a56 <__udivmodhi4_ep>:
    2a56:	88 1f       	adc	r24, r24
    2a58:	99 1f       	adc	r25, r25
    2a5a:	5a 95       	dec	r21
    2a5c:	a9 f7       	brne	.-22     	; 0x2a48 <__udivmodhi4_loop>
    2a5e:	80 95       	com	r24
    2a60:	90 95       	com	r25
    2a62:	bc 01       	movw	r22, r24
    2a64:	cd 01       	movw	r24, r26
    2a66:	08 95       	ret

00002a68 <_exit>:
    2a68:	f8 94       	cli

00002a6a <__stop_program>:
    2a6a:	ff cf       	rjmp	.-2      	; 0x2a6a <__stop_program>
